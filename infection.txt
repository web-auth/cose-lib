Escaped mutants:
================

1) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS256.php:28    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignatureLength() : int
     {
-        return 256;
+        return 257;
     }
 }


2) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/Hmac.php:15    [M] CastString

--- Original
+++ New
@@ @@
     public function hash(string $data, Key $key) : string
     {
         $this->checKey($key);
-        $signature = hash_hmac($this->getHashAlgorithm(), $data, (string) $key->get(-1), true);
+        $signature = hash_hmac($this->getHashAlgorithm(), $data, $key->get(-1), true);
         return mb_substr($signature, 0, intdiv($this->getSignatureLength(), 8), '8bit');
     }
     public function verify(string $data, Key $key, string $signature) : bool


3) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/Hmac.php:17    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $this->checKey($key);
         $signature = hash_hmac($this->getHashAlgorithm(), $data, (string) $key->get(-1), true);
-        return mb_substr($signature, 0, intdiv($this->getSignatureLength(), 8), '8bit');
+        return mb_substr($signature, 0, intdiv($this->getSignatureLength(), 7), '8bit');
     }
     public function verify(string $data, Key $key, string $signature) : bool
     {


4) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/Hmac.php:17    [M] MBString

--- Original
+++ New
@@ @@
     {
         $this->checKey($key);
         $signature = hash_hmac($this->getHashAlgorithm(), $data, (string) $key->get(-1), true);
-        return mb_substr($signature, 0, intdiv($this->getSignatureLength(), 8), '8bit');
+        return substr($signature, 0, intdiv($this->getSignatureLength(), 8));
     }
     public function verify(string $data, Key $key, string $signature) : bool
     {


5) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/Hmac.php:32    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private function checKey(Key $key) : void
     {
         Assertion::eq($key->type(), 4, 'Invalid key. Must be of type symmetric');
-        Assertion::true($key->has(-1), 'Invalid key. The value of the key is missing');
+        
     }
 }


6) /home/florent/PhpstormProjects/cose-lib/src/Key/Key.php:40    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function __construct(array $data)
     {
-        Assertion::keyExists($data, self::TYPE, 'Invalid key: the type is not defined');
+        
         $this->data = $data;
     }
     /**


7) /home/florent/PhpstormProjects/cose-lib/src/Key/Key.php:93    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function get(int|string $key) : mixed
     {
-        Assertion::keyExists($this->data, $key, sprintf('The key has no data at index %d', $key));
+        
         return $this->data[$key];
     }
 }


8) /home/florent/PhpstormProjects/cose-lib/src/Key/OkpKey.php:39    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function __construct(array $data)
     {
         parent::__construct($data);
-        Assertion::eq($data[self::TYPE], self::TYPE_OKP, 'Invalid OKP key. The key type does not correspond to an OKP key');
+        
         Assertion::keyExists($data, self::DATA_CURVE, 'Invalid EC2 key. The curve is missing');
         Assertion::keyExists($data, self::DATA_X, 'Invalid OKP key. The x coordinate is missing');
         Assertion::inArray((int) $data[self::DATA_CURVE], self::SUPPORTED_CURVES, 'The curve is not supported');


9) /home/florent/PhpstormProjects/cose-lib/src/Key/OkpKey.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         parent::__construct($data);
         Assertion::eq($data[self::TYPE], self::TYPE_OKP, 'Invalid OKP key. The key type does not correspond to an OKP key');
-        Assertion::keyExists($data, self::DATA_CURVE, 'Invalid EC2 key. The curve is missing');
+        
         Assertion::keyExists($data, self::DATA_X, 'Invalid OKP key. The x coordinate is missing');
         Assertion::inArray((int) $data[self::DATA_CURVE], self::SUPPORTED_CURVES, 'The curve is not supported');
     }


10) /home/florent/PhpstormProjects/cose-lib/src/Key/OkpKey.php:45    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         parent::__construct($data);
         Assertion::eq($data[self::TYPE], self::TYPE_OKP, 'Invalid OKP key. The key type does not correspond to an OKP key');
         Assertion::keyExists($data, self::DATA_CURVE, 'Invalid EC2 key. The curve is missing');
-        Assertion::keyExists($data, self::DATA_X, 'Invalid OKP key. The x coordinate is missing');
+        
         Assertion::inArray((int) $data[self::DATA_CURVE], self::SUPPORTED_CURVES, 'The curve is not supported');
     }
     /**


11) /home/florent/PhpstormProjects/cose-lib/src/Key/OkpKey.php:46    [M] CastInt

--- Original
+++ New
@@ @@
         Assertion::eq($data[self::TYPE], self::TYPE_OKP, 'Invalid OKP key. The key type does not correspond to an OKP key');
         Assertion::keyExists($data, self::DATA_CURVE, 'Invalid EC2 key. The curve is missing');
         Assertion::keyExists($data, self::DATA_X, 'Invalid OKP key. The x coordinate is missing');
-        Assertion::inArray((int) $data[self::DATA_CURVE], self::SUPPORTED_CURVES, 'The curve is not supported');
+        Assertion::inArray($data[self::DATA_CURVE], self::SUPPORTED_CURVES, 'The curve is not supported');
     }
     /**
      * @param array<int|string, mixed> $data


12) /home/florent/PhpstormProjects/cose-lib/src/Key/OkpKey.php:46    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Assertion::eq($data[self::TYPE], self::TYPE_OKP, 'Invalid OKP key. The key type does not correspond to an OKP key');
         Assertion::keyExists($data, self::DATA_CURVE, 'Invalid EC2 key. The curve is missing');
         Assertion::keyExists($data, self::DATA_X, 'Invalid OKP key. The x coordinate is missing');
-        Assertion::inArray((int) $data[self::DATA_CURVE], self::SUPPORTED_CURVES, 'The curve is not supported');
+        
     }
     /**
      * @param array<int|string, mixed> $data


13) /home/florent/PhpstormProjects/cose-lib/src/Key/SymmetricKey.php:19    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function __construct(array $data)
     {
         parent::__construct($data);
-        Assertion::eq($data[self::TYPE], self::TYPE_OCT, 'Invalid symmetric key. The key type does not correspond to a symmetric key');
+        
         Assertion::keyExists($data, self::DATA_K, 'Invalid symmetric key. The parameter "k" is missing');
     }
     /**


14) /home/florent/PhpstormProjects/cose-lib/src/Key/SymmetricKey.php:24    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         parent::__construct($data);
         Assertion::eq($data[self::TYPE], self::TYPE_OCT, 'Invalid symmetric key. The key type does not correspond to a symmetric key');
-        Assertion::keyExists($data, self::DATA_K, 'Invalid symmetric key. The parameter "k" is missing');
+        
     }
     /**
      * @param array<int|string, mixed> $data


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS256Truncated64.php:11    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class HS256Truncated64 extends Hmac
 {
     public const ID = 4;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


2) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS256Truncated64.php:28    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignatureLength() : int
     {
-        return 64;
+        return 63;
     }
 }


3) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS256Truncated64.php:28    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignatureLength() : int
     {
-        return 64;
+        return 65;
     }
 }


4) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS256Truncated64.php:28    [M] IntegerNegation

--- Original
+++ New
@@ @@
     }
     protected function getSignatureLength() : int
     {
-        return 64;
+        return -64;
     }
 }


5) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS384.php:11    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class HS384 extends Hmac
 {
     public const ID = 6;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


6) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS384.php:28    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignatureLength() : int
     {
-        return 384;
+        return 383;
     }
 }


7) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS384.php:28    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignatureLength() : int
     {
-        return 384;
+        return 385;
     }
 }


8) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS384.php:28    [M] IntegerNegation

--- Original
+++ New
@@ @@
     }
     protected function getSignatureLength() : int
     {
-        return 384;
+        return -384;
     }
 }


9) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS512.php:11    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class HS512 extends Hmac
 {
     public const ID = 7;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


10) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS512.php:28    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignatureLength() : int
     {
-        return 512;
+        return 511;
     }
 }


11) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS512.php:28    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignatureLength() : int
     {
-        return 512;
+        return 513;
     }
 }


12) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Mac/HS512.php:28    [M] IntegerNegation

--- Original
+++ New
@@ @@
     }
     protected function getSignatureLength() : int
     {
-        return 512;
+        return -512;
     }
 }


13) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Manager.php:17    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @var array<int, Algorithm>
      */
     private array $algorithms = [];
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


14) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Manager.php:22    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return new self();
     }
-    public function add(Algorithm ...$algorithms) : self
+    protected function add(Algorithm ...$algorithms) : self
     {
         foreach ($algorithms as $algorithm) {
             $identifier = $algorithm::identifier();


15) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Manager.php:24    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function add(Algorithm ...$algorithms) : self
     {
-        foreach ($algorithms as $algorithm) {
+        foreach (array() as $algorithm) {
             $identifier = $algorithm::identifier();
             $this->algorithms[$identifier] = $algorithm;
         }


16) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Manager.php:35    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return iterable<int>
      */
-    public function list() : iterable
+    protected function list() : iterable
     {
         yield from array_keys($this->algorithms);
     }


17) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Manager.php:37    [M] UnwrapArrayKeys

--- Original
+++ New
@@ @@
      */
     public function list() : iterable
     {
-        yield from array_keys($this->algorithms);
+        yield from $this->algorithms;
     }
     /**
      * @return iterable<int, Algorithm>


18) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Manager.php:43    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return iterable<int, Algorithm>
      */
-    public function all() : iterable
+    protected function all() : iterable
     {
         yield from $this->algorithms;
     }


19) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Manager.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         yield from $this->algorithms;
     }
-    public function has(int $identifier) : bool
+    protected function has(int $identifier) : bool
     {
         return array_key_exists($identifier, $this->algorithms);
     }


20) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Manager.php:53    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return array_key_exists($identifier, $this->algorithms);
     }
-    public function get(int $identifier) : Algorithm
+    protected function get(int $identifier) : Algorithm
     {
         Assertion::true($this->has($identifier), 'Unsupported algorithm');
         return $this->algorithms[$identifier];
     }
 }


21) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Manager.php:55    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function get(int $identifier) : Algorithm
     {
-        Assertion::true($this->has($identifier), 'Unsupported algorithm');
+        
         return $this->algorithms[$identifier];
     }
 }


22) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/ManagerFactory.php:16    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @var array<string, Algorithm>
      */
     private array $algorithms = [];
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


23) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/ManagerFactory.php:21    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return new self();
     }
-    public function add(string $alias, Algorithm $algorithm) : self
+    protected function add(string $alias, Algorithm $algorithm) : self
     {
         $this->algorithms[$alias] = $algorithm;
         return $this;


24) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/ManagerFactory.php:31    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return string[]
      */
-    public function list() : iterable
+    protected function list() : iterable
     {
         yield from array_keys($this->algorithms);
     }


25) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/ManagerFactory.php:33    [M] UnwrapArrayKeys

--- Original
+++ New
@@ @@
      */
     public function list() : iterable
     {
-        yield from array_keys($this->algorithms);
+        yield from $this->algorithms;
     }
     /**
      * @return Algorithm[]


26) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/ManagerFactory.php:39    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return Algorithm[]
      */
-    public function all() : iterable
+    protected function all() : iterable
     {
         yield from $this->algorithms;
     }


27) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/ManagerFactory.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         yield from $this->algorithms;
     }
-    public function generate(string ...$aliases) : Manager
+    protected function generate(string ...$aliases) : Manager
     {
         $manager = Manager::create();
         foreach ($aliases as $alias) {


28) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/ManagerFactory.php:47    [M] Foreach_

--- Original
+++ New
@@ @@
     public function generate(string ...$aliases) : Manager
     {
         $manager = Manager::create();
-        foreach ($aliases as $alias) {
+        foreach (array() as $alias) {
             Assertion::keyExists($this->algorithms, $alias, sprintf('The algorithm with alias "%s" is not supported', $alias));
             $manager->add($this->algorithms[$alias]);
         }


29) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/ManagerFactory.php:48    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $manager = Manager::create();
         foreach ($aliases as $alias) {
-            Assertion::keyExists($this->algorithms, $alias, sprintf('The algorithm with alias "%s" is not supported', $alias));
+            
             $manager->add($this->algorithms[$alias]);
         }
         return $manager;
     }
 }


30) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/ManagerFactory.php:53    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $manager = Manager::create();
         foreach ($aliases as $alias) {
             Assertion::keyExists($this->algorithms, $alias, sprintf('The algorithm with alias "%s" is not supported', $alias));
-            $manager->add($this->algorithms[$alias]);
+            
         }
         return $manager;
     }
 }


31) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECDSA.php:19    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
     public function sign(string $data, Key $key) : string
     {
         $key = $this->handleKey($key);
-        openssl_sign($data, $signature, $key->asPEM(), $this->getHashAlgorithm());
+        
         return ECSignature::fromAsn1($signature, $this->getSignaturePartLength());
     }
     public function verify(string $data, Key $key, string $signature) : bool


32) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECDSA.php:30    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $key = $this->handleKey($key);
         $publicKey = $key->toPublic();
         $signature = ECSignature::toAsn1($signature, $this->getSignaturePartLength());
-        return openssl_verify($data, $signature, $publicKey->asPEM(), $this->getHashAlgorithm()) === 1;
+        return openssl_verify($data, $signature, $publicKey->asPEM(), $this->getHashAlgorithm()) === 2;
     }
     protected abstract function getCurve() : int;
     protected abstract function getHashAlgorithm() : int;


33) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECDSA.php:30    [M] Identical

--- Original
+++ New
@@ @@
         $key = $this->handleKey($key);
         $publicKey = $key->toPublic();
         $signature = ECSignature::toAsn1($signature, $this->getSignaturePartLength());
-        return openssl_verify($data, $signature, $publicKey->asPEM(), $this->getHashAlgorithm()) === 1;
+        return openssl_verify($data, $signature, $publicKey->asPEM(), $this->getHashAlgorithm()) !== 1;
     }
     protected abstract function getCurve() : int;
     protected abstract function getHashAlgorithm() : int;


34) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECDSA.php:42    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private function handleKey(Key $key) : Ec2Key
     {
         $key = Ec2Key::create($key->getData());
-        Assertion::eq($key->curve(), $this->getCurve(), 'This key cannot be used with this algorithm');
+        
         return $key;
     }
 }


35) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:36    [M] PublicVisibility

--- Original
+++ New
@@ @@
     private const ASN1_BIG_INTEGER_LIMIT = '7f';
     private const ASN1_NEGATIVE_INTEGER = '00';
     private const BYTE_SIZE = 2;
-    public static function toAsn1(string $signature, int $length) : string
+    protected static function toAsn1(string $signature, int $length) : string
     {
         $signature = bin2hex($signature);
         if (self::octetLength($signature) !== $length) {


36) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:40    [M] NotIdentical

--- Original
+++ New
@@ @@
     public static function toAsn1(string $signature, int $length) : string
     {
         $signature = bin2hex($signature);
-        if (self::octetLength($signature) !== $length) {
+        if (self::octetLength($signature) === $length) {
             throw new InvalidArgumentException('Invalid signature length.');
         }
         $pointR = self::preparePositiveInteger(mb_substr($signature, 0, $length, '8bit'));


37) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:41    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $signature = bin2hex($signature);
         if (self::octetLength($signature) !== $length) {
-            throw new InvalidArgumentException('Invalid signature length.');
+            new InvalidArgumentException('Invalid signature length.');
         }
         $pointR = self::preparePositiveInteger(mb_substr($signature, 0, $length, '8bit'));
         $pointS = self::preparePositiveInteger(mb_substr($signature, $length, null, '8bit'));


38) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:44    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if (self::octetLength($signature) !== $length) {
             throw new InvalidArgumentException('Invalid signature length.');
         }
-        $pointR = self::preparePositiveInteger(mb_substr($signature, 0, $length, '8bit'));
+        $pointR = self::preparePositiveInteger(mb_substr($signature, -1, $length, '8bit'));
         $pointS = self::preparePositiveInteger(mb_substr($signature, $length, null, '8bit'));
         $lengthR = self::octetLength($pointR);
         $lengthS = self::octetLength($pointS);


39) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:44    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if (self::octetLength($signature) !== $length) {
             throw new InvalidArgumentException('Invalid signature length.');
         }
-        $pointR = self::preparePositiveInteger(mb_substr($signature, 0, $length, '8bit'));
+        $pointR = self::preparePositiveInteger(mb_substr($signature, 1, $length, '8bit'));
         $pointS = self::preparePositiveInteger(mb_substr($signature, $length, null, '8bit'));
         $lengthR = self::octetLength($pointR);
         $lengthS = self::octetLength($pointS);


40) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:44    [M] MBString

--- Original
+++ New
@@ @@
         if (self::octetLength($signature) !== $length) {
             throw new InvalidArgumentException('Invalid signature length.');
         }
-        $pointR = self::preparePositiveInteger(mb_substr($signature, 0, $length, '8bit'));
+        $pointR = self::preparePositiveInteger(substr($signature, 0, $length));
         $pointS = self::preparePositiveInteger(mb_substr($signature, $length, null, '8bit'));
         $lengthR = self::octetLength($pointR);
         $lengthS = self::octetLength($pointS);


41) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:45    [M] MBString

--- Original
+++ New
@@ @@
             throw new InvalidArgumentException('Invalid signature length.');
         }
         $pointR = self::preparePositiveInteger(mb_substr($signature, 0, $length, '8bit'));
-        $pointS = self::preparePositiveInteger(mb_substr($signature, $length, null, '8bit'));
+        $pointS = self::preparePositiveInteger(substr($signature, $length, null));
         $lengthR = self::octetLength($pointR);
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;


42) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:50    [M] Plus

--- Original
+++ New
@@ @@
         $pointS = self::preparePositiveInteger(mb_substr($signature, $length, null, '8bit'));
         $lengthR = self::octetLength($pointR);
         $lengthS = self::octetLength($pointS);
-        $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
+        $totalLength = $lengthR - $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
         return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }


43) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:50    [M] Plus

--- Original
+++ New
@@ @@
         $pointS = self::preparePositiveInteger(mb_substr($signature, $length, null, '8bit'));
         $lengthR = self::octetLength($pointR);
         $lengthS = self::octetLength($pointS);
-        $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
+        $totalLength = $lengthR + $lengthS - self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
         return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }


44) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:50    [M] Plus

--- Original
+++ New
@@ @@
         $pointS = self::preparePositiveInteger(mb_substr($signature, $length, null, '8bit'));
         $lengthR = self::octetLength($pointR);
         $lengthS = self::octetLength($pointS);
-        $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
+        $totalLength = $lengthR + $lengthS + self::BYTE_SIZE - self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
         return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }


45) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:51    [M] GreaterThan

--- Original
+++ New
@@ @@
         $lengthR = self::octetLength($pointR);
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
-        $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
+        $lengthPrefix = $totalLength >= self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
         return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string


46) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:51    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         $lengthR = self::octetLength($pointR);
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
-        $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
+        $lengthPrefix = $totalLength <= self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
         return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string


47) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:51    [M] Ternary

--- Original
+++ New
@@ @@
         $lengthR = self::octetLength($pointR);
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
-        $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
+        $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? '' : self::ASN1_LENGTH_2BYTES;
         return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string


48) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] Concat

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin($lengthPrefix . self::ASN1_SEQUENCE . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


49) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin($lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


50) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


51) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] Concat

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . dechex($totalLength) . $lengthPrefix . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


52) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


53) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] Concat

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . self::ASN1_INTEGER . dechex($totalLength) . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


54) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


55) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] Concat

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . dechex($lengthR) . self::ASN1_INTEGER . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


56) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


57) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] Concat

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . $pointR . dechex($lengthR) . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


58) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


59) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] Concat

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . self::ASN1_INTEGER . $pointR . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


60) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . dechex($lengthS) . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


61) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] Concat

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . dechex($lengthS) . self::ASN1_INTEGER . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


62) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . $pointS);
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


63) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] Concat

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . $pointS . dechex($lengthS));
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


64) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:54    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $lengthS = self::octetLength($pointS);
         $totalLength = $lengthR + $lengthS + self::BYTE_SIZE + self::BYTE_SIZE;
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
-        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
+        return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS));
     }
     public static function fromAsn1(string $signature, int $length) : string
     {


65) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:61    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $lengthPrefix = $totalLength > self::ASN1_MAX_SINGLE_BYTE ? self::ASN1_LENGTH_2BYTES : '';
         return hex2bin(self::ASN1_SEQUENCE . $lengthPrefix . dechex($totalLength) . self::ASN1_INTEGER . dechex($lengthR) . $pointR . self::ASN1_INTEGER . dechex($lengthS) . $pointS);
     }
-    public static function fromAsn1(string $signature, int $length) : string
+    protected static function fromAsn1(string $signature, int $length) : string
     {
         $message = bin2hex($signature);
         $position = 0;


66) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:64    [M] DecrementInteger

--- Original
+++ New
@@ @@
     public static function fromAsn1(string $signature, int $length) : string
     {
         $message = bin2hex($signature);
-        $position = 0;
+        $position = -1;
         if (self::readAsn1Content($message, $position, self::BYTE_SIZE) !== self::ASN1_SEQUENCE) {
             throw new InvalidArgumentException('Invalid data. Should start with a sequence.');
         }


67) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:66    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
         $message = bin2hex($signature);
         $position = 0;
-        if (self::readAsn1Content($message, $position, self::BYTE_SIZE) !== self::ASN1_SEQUENCE) {
+        if (self::readAsn1Content($message, $position, self::BYTE_SIZE) === self::ASN1_SEQUENCE) {
             throw new InvalidArgumentException('Invalid data. Should start with a sequence.');
         }
         // @phpstan-ignore-next-line


68) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:67    [M] Throw_

--- Original
+++ New
@@ @@
         $message = bin2hex($signature);
         $position = 0;
         if (self::readAsn1Content($message, $position, self::BYTE_SIZE) !== self::ASN1_SEQUENCE) {
-            throw new InvalidArgumentException('Invalid data. Should start with a sequence.');
+            new InvalidArgumentException('Invalid data. Should start with a sequence.');
         }
         // @phpstan-ignore-next-line
         if (self::readAsn1Content($message, $position, self::BYTE_SIZE) === self::ASN1_LENGTH_2BYTES) {


69) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:71    [M] Identical

--- Original
+++ New
@@ @@
             throw new InvalidArgumentException('Invalid data. Should start with a sequence.');
         }
         // @phpstan-ignore-next-line
-        if (self::readAsn1Content($message, $position, self::BYTE_SIZE) === self::ASN1_LENGTH_2BYTES) {
+        if (self::readAsn1Content($message, $position, self::BYTE_SIZE) !== self::ASN1_LENGTH_2BYTES) {
             $position += self::BYTE_SIZE;
         }
         $pointR = self::retrievePositiveInteger(self::readAsn1Integer($message, $position));


70) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:72    [M] Assignment

--- Original
+++ New
@@ @@
         }
         // @phpstan-ignore-next-line
         if (self::readAsn1Content($message, $position, self::BYTE_SIZE) === self::ASN1_LENGTH_2BYTES) {
-            $position += self::BYTE_SIZE;
+            $position = self::BYTE_SIZE;
         }
         $pointR = self::retrievePositiveInteger(self::readAsn1Integer($message, $position));
         $pointS = self::retrievePositiveInteger(self::readAsn1Integer($message, $position));


71) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:72    [M] PlusEqual

--- Original
+++ New
@@ @@
         }
         // @phpstan-ignore-next-line
         if (self::readAsn1Content($message, $position, self::BYTE_SIZE) === self::ASN1_LENGTH_2BYTES) {
-            $position += self::BYTE_SIZE;
+            $position -= self::BYTE_SIZE;
         }
         $pointR = self::retrievePositiveInteger(self::readAsn1Integer($message, $position));
         $pointS = self::retrievePositiveInteger(self::readAsn1Integer($message, $position));


72) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:78    [M] Concat

--- Original
+++ New
@@ @@
         }
         $pointR = self::retrievePositiveInteger(self::readAsn1Integer($message, $position));
         $pointS = self::retrievePositiveInteger(self::readAsn1Integer($message, $position));
-        return hex2bin(str_pad($pointR, $length, '0', STR_PAD_LEFT) . str_pad($pointS, $length, '0', STR_PAD_LEFT));
+        return hex2bin(str_pad($pointS, $length, '0', STR_PAD_LEFT) . str_pad($pointR, $length, '0', STR_PAD_LEFT));
     }
     private static function octetLength(string $data) : int
     {


73) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:78    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         }
         $pointR = self::retrievePositiveInteger(self::readAsn1Integer($message, $position));
         $pointS = self::retrievePositiveInteger(self::readAsn1Integer($message, $position));
-        return hex2bin(str_pad($pointR, $length, '0', STR_PAD_LEFT) . str_pad($pointS, $length, '0', STR_PAD_LEFT));
+        return hex2bin(str_pad($pointS, $length, '0', STR_PAD_LEFT));
     }
     private static function octetLength(string $data) : int
     {


74) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:78    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         }
         $pointR = self::retrievePositiveInteger(self::readAsn1Integer($message, $position));
         $pointS = self::retrievePositiveInteger(self::readAsn1Integer($message, $position));
-        return hex2bin(str_pad($pointR, $length, '0', STR_PAD_LEFT) . str_pad($pointS, $length, '0', STR_PAD_LEFT));
+        return hex2bin(str_pad($pointR, $length, '0', STR_PAD_LEFT));
     }
     private static function octetLength(string $data) : int
     {


75) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:83    [M] MBString

--- Original
+++ New
@@ @@
     }
     private static function octetLength(string $data) : int
     {
-        return intdiv(mb_strlen($data, '8bit'), self::BYTE_SIZE);
+        return intdiv(strlen($data), self::BYTE_SIZE);
     }
     private static function preparePositiveInteger(string $data) : string
     {


76) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:88    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     private static function preparePositiveInteger(string $data) : string
     {
-        if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        if (mb_substr($data, -1, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {


77) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:88    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     private static function preparePositiveInteger(string $data) : string
     {
-        if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        if (mb_substr($data, 1, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {


78) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:88    [M] MBString

--- Original
+++ New
@@ @@
     }
     private static function preparePositiveInteger(string $data) : string
     {
-        if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        if (substr($data, 0, self::BYTE_SIZE) > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {


79) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:88    [M] GreaterThan

--- Original
+++ New
@@ @@
     }
     private static function preparePositiveInteger(string $data) : string
     {
-        if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') >= self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {


80) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:88    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
     }
     private static function preparePositiveInteger(string $data) : string
     {
-        if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {


81) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:89    [M] Concat

--- Original
+++ New
@@ @@
     private static function preparePositiveInteger(string $data) : string
     {
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
-            return self::ASN1_NEGATIVE_INTEGER . $data;
+            return $data . self::ASN1_NEGATIVE_INTEGER;
         }
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');


82) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:89    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     private static function preparePositiveInteger(string $data) : string
     {
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
-            return self::ASN1_NEGATIVE_INTEGER . $data;
+            return $data;
         }
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');


83) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:89    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     private static function preparePositiveInteger(string $data) : string
     {
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
-            return self::ASN1_NEGATIVE_INTEGER . $data;
+            return self::ASN1_NEGATIVE_INTEGER;
         }
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');


84) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:92    [M] While_

--- Original
+++ New
@@ @@
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
+        while (false) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;


85) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:93    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, -1, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;


86) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:93    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 1, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;


87) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:93    [M] MBString

--- Original
+++ New
@@ @@
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
+        while (strpos($data, self::ASN1_NEGATIVE_INTEGER, 0) === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;


88) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:93    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === -1 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;


89) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:93    [M] Identical

--- Original
+++ New
@@ @@
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') !== 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;


90) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:93    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 || mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;


91) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:94    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 1, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;


92) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:94    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 3, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;


93) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:94    [M] MBString

--- Original
+++ New
@@ @@
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && substr($data, 2, self::BYTE_SIZE) <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;


94) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:94    [M] LessThanOrEqualTo

--- Original
+++ New
@@ @@
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') < self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;


95) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:94    [M] LessThanOrEqualToNegotiation

--- Original
+++ New
@@ @@
         if (mb_substr($data, 0, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;


96) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:96    [M] DecrementInteger

--- Original
+++ New
@@ @@
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
-            $data = mb_substr($data, 2, null, '8bit');
+            $data = mb_substr($data, 1, null, '8bit');
         }
         return $data;
     }


97) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:96    [M] IncrementInteger

--- Original
+++ New
@@ @@
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
-            $data = mb_substr($data, 2, null, '8bit');
+            $data = mb_substr($data, 3, null, '8bit');
         }
         return $data;
     }


98) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:96    [M] MBString

--- Original
+++ New
@@ @@
             return self::ASN1_NEGATIVE_INTEGER . $data;
         }
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
-            $data = mb_substr($data, 2, null, '8bit');
+            $data = substr($data, 2, null);
         }
         return $data;
     }


99) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:104    [M] MBString

--- Original
+++ New
@@ @@
     }
     private static function readAsn1Content(string $message, int &$position, int $length) : string
     {
-        $content = mb_substr($message, $position, $length, '8bit');
+        $content = substr($message, $position, $length);
         $position += $length;
         return $content;
     }


100) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:105    [M] Assignment

--- Original
+++ New
@@ @@
     private static function readAsn1Content(string $message, int &$position, int $length) : string
     {
         $content = mb_substr($message, $position, $length, '8bit');
-        $position += $length;
+        $position = $length;
         return $content;
     }
     private static function readAsn1Integer(string $message, int &$position) : string


101) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:105    [M] PlusEqual

--- Original
+++ New
@@ @@
     private static function readAsn1Content(string $message, int &$position, int $length) : string
     {
         $content = mb_substr($message, $position, $length, '8bit');
-        $position += $length;
+        $position -= $length;
         return $content;
     }
     private static function readAsn1Integer(string $message, int &$position) : string


102) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:112    [M] NotIdentical

--- Original
+++ New
@@ @@
     }
     private static function readAsn1Integer(string $message, int &$position) : string
     {
-        if (self::readAsn1Content($message, $position, self::BYTE_SIZE) !== self::ASN1_INTEGER) {
+        if (self::readAsn1Content($message, $position, self::BYTE_SIZE) === self::ASN1_INTEGER) {
             throw new InvalidArgumentException('Invalid data. Should contain an integer.');
         }
         $length = (int) hexdec(self::readAsn1Content($message, $position, self::BYTE_SIZE));


103) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:113    [M] Throw_

--- Original
+++ New
@@ @@
     private static function readAsn1Integer(string $message, int &$position) : string
     {
         if (self::readAsn1Content($message, $position, self::BYTE_SIZE) !== self::ASN1_INTEGER) {
-            throw new InvalidArgumentException('Invalid data. Should contain an integer.');
+            new InvalidArgumentException('Invalid data. Should contain an integer.');
         }
         $length = (int) hexdec(self::readAsn1Content($message, $position, self::BYTE_SIZE));
         return self::readAsn1Content($message, $position, $length * self::BYTE_SIZE);


104) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:116    [M] CastInt

--- Original
+++ New
@@ @@
         if (self::readAsn1Content($message, $position, self::BYTE_SIZE) !== self::ASN1_INTEGER) {
             throw new InvalidArgumentException('Invalid data. Should contain an integer.');
         }
-        $length = (int) hexdec(self::readAsn1Content($message, $position, self::BYTE_SIZE));
+        $length = hexdec(self::readAsn1Content($message, $position, self::BYTE_SIZE));
         return self::readAsn1Content($message, $position, $length * self::BYTE_SIZE);
     }
     private static function retrievePositiveInteger(string $data) : string


105) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:118    [M] Multiplication

--- Original
+++ New
@@ @@
             throw new InvalidArgumentException('Invalid data. Should contain an integer.');
         }
         $length = (int) hexdec(self::readAsn1Content($message, $position, self::BYTE_SIZE));
-        return self::readAsn1Content($message, $position, $length * self::BYTE_SIZE);
+        return self::readAsn1Content($message, $position, $length / self::BYTE_SIZE);
     }
     private static function retrievePositiveInteger(string $data) : string
     {


106) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:123    [M] While_

--- Original
+++ New
@@ @@
     }
     private static function retrievePositiveInteger(string $data) : string
     {
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        while (false) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;
     }
 }


107) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:124    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     private static function retrievePositiveInteger(string $data) : string
     {
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, -1, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;
     }
 }


108) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:124    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     private static function retrievePositiveInteger(string $data) : string
     {
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 1, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;
     }
 }


109) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:124    [M] MBString

--- Original
+++ New
@@ @@
     }
     private static function retrievePositiveInteger(string $data) : string
     {
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        while (strpos($data, self::ASN1_NEGATIVE_INTEGER, 0) === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;
     }
 }


110) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:124    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     private static function retrievePositiveInteger(string $data) : string
     {
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === -1 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;
     }
 }


111) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:124    [M] Identical

--- Original
+++ New
@@ @@
     }
     private static function retrievePositiveInteger(string $data) : string
     {
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') !== 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;
     }
 }


112) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:124    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     private static function retrievePositiveInteger(string $data) : string
     {
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 || mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;
     }
 }


113) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:125    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     private static function retrievePositiveInteger(string $data) : string
     {
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 1, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;
     }
 }


114) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:125    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     private static function retrievePositiveInteger(string $data) : string
     {
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 3, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;
     }
 }


115) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:125    [M] MBString

--- Original
+++ New
@@ @@
     }
     private static function retrievePositiveInteger(string $data) : string
     {
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && substr($data, 2, self::BYTE_SIZE) > self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;
     }
 }


116) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:125    [M] GreaterThan

--- Original
+++ New
@@ @@
     }
     private static function retrievePositiveInteger(string $data) : string
     {
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') >= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;
     }
 }


117) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:125    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
     }
     private static function retrievePositiveInteger(string $data) : string
     {
-        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
+        while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') <= self::ASN1_BIG_INTEGER_LIMIT) {
             $data = mb_substr($data, 2, null, '8bit');
         }
         return $data;
     }
 }


118) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:127    [M] DecrementInteger

--- Original
+++ New
@@ @@
     private static function retrievePositiveInteger(string $data) : string
     {
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
-            $data = mb_substr($data, 2, null, '8bit');
+            $data = mb_substr($data, 1, null, '8bit');
         }
         return $data;
     }
 }


119) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:127    [M] IncrementInteger

--- Original
+++ New
@@ @@
     private static function retrievePositiveInteger(string $data) : string
     {
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
-            $data = mb_substr($data, 2, null, '8bit');
+            $data = mb_substr($data, 3, null, '8bit');
         }
         return $data;
     }
 }


120) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php:127    [M] MBString

--- Original
+++ New
@@ @@
     private static function retrievePositiveInteger(string $data) : string
     {
         while (mb_strpos($data, self::ASN1_NEGATIVE_INTEGER, 0, '8bit') === 0 && mb_substr($data, 2, self::BYTE_SIZE, '8bit') > self::ASN1_BIG_INTEGER_LIMIT) {
-            $data = mb_substr($data, 2, null, '8bit');
+            $data = substr($data, 2, null);
         }
         return $data;
     }
 }


121) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES256.php:14    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class ES256 extends ECDSA
 {
     public const ID = -7;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


122) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES256.php:36    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignaturePartLength() : int
     {
-        return 64;
+        return 63;
     }
 }


123) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES256.php:36    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignaturePartLength() : int
     {
-        return 64;
+        return 65;
     }
 }


124) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES256.php:36    [M] IntegerNegation

--- Original
+++ New
@@ @@
     }
     protected function getSignaturePartLength() : int
     {
-        return 64;
+        return -64;
     }
 }


125) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES256K.php:14    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class ES256K extends ECDSA
 {
     public const ID = -46;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


126) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES256K.php:36    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignaturePartLength() : int
     {
-        return 64;
+        return 63;
     }
 }


127) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES256K.php:36    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignaturePartLength() : int
     {
-        return 64;
+        return 65;
     }
 }


128) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES256K.php:36    [M] IntegerNegation

--- Original
+++ New
@@ @@
     }
     protected function getSignaturePartLength() : int
     {
-        return 64;
+        return -64;
     }
 }


129) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES384.php:14    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class ES384 extends ECDSA
 {
     public const ID = -35;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


130) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES384.php:36    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignaturePartLength() : int
     {
-        return 96;
+        return 95;
     }
 }


131) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES384.php:36    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignaturePartLength() : int
     {
-        return 96;
+        return 97;
     }
 }


132) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES384.php:36    [M] IntegerNegation

--- Original
+++ New
@@ @@
     }
     protected function getSignaturePartLength() : int
     {
-        return 96;
+        return -96;
     }
 }


133) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES512.php:14    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class ES512 extends ECDSA
 {
     public const ID = -36;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


134) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES512.php:36    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignaturePartLength() : int
     {
-        return 132;
+        return 131;
     }
 }


135) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES512.php:36    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     protected function getSignaturePartLength() : int
     {
-        return 132;
+        return 133;
     }
 }


136) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/ECDSA/ES512.php:36    [M] IntegerNegation

--- Original
+++ New
@@ @@
     }
     protected function getSignaturePartLength() : int
     {
-        return 132;
+        return -132;
     }
 }


137) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/EdDSA/Ed25519.php:11    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class Ed25519 extends EdDSA
 {
     public const ID = -8;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


138) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/EdDSA/Ed256.php:13    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class Ed256 extends EdDSA
 {
     public const ID = -260;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


139) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/EdDSA/Ed512.php:13    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class Ed512 extends EdDSA
 {
     public const ID = -261;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


140) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/EdDSA/EdDSA.php:22    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function sign(string $data, Key $key) : string
     {
         $key = $this->handleKey($key);
-        Assertion::true($key->isPrivate(), 'The key is not private');
+        
         $x = $key->x();
         $d = $key->d();
         $secret = $d . $x;


141) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/EdDSA/EdDSA.php:26    [M] Concat

--- Original
+++ New
@@ @@
         Assertion::true($key->isPrivate(), 'The key is not private');
         $x = $key->x();
         $d = $key->d();
-        $secret = $d . $x;
+        $secret = $x . $d;
         return match ($key->curve()) {
             OkpKey::CURVE_ED25519 => sodium_crypto_sign_detached($data, $secret),
             default => throw new InvalidArgumentException('Unsupported curve'),


142) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/EdDSA/EdDSA.php:26    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         Assertion::true($key->isPrivate(), 'The key is not private');
         $x = $key->x();
         $d = $key->d();
-        $secret = $d . $x;
+        $secret = $x;
         return match ($key->curve()) {
             OkpKey::CURVE_ED25519 => sodium_crypto_sign_detached($data, $secret),
             default => throw new InvalidArgumentException('Unsupported curve'),


143) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/EdDSA/EdDSA.php:26    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         Assertion::true($key->isPrivate(), 'The key is not private');
         $x = $key->x();
         $d = $key->d();
-        $secret = $d . $x;
+        $secret = $d;
         return match ($key->curve()) {
             OkpKey::CURVE_ED25519 => sodium_crypto_sign_detached($data, $secret),
             default => throw new InvalidArgumentException('Unsupported curve'),


144) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/EdDSA/EdDSA.php:37    [M] NotIdentical

--- Original
+++ New
@@ @@
     public function verify(string $data, Key $key, string $signature) : bool
     {
         $key = $this->handleKey($key);
-        if ($key->curve() !== OkpKey::CURVE_ED25519) {
+        if ($key->curve() === OkpKey::CURVE_ED25519) {
             throw new InvalidArgumentException('Unsupported curve');
         }
         try {


145) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/EdDSA/EdDSA.php:38    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $key = $this->handleKey($key);
         if ($key->curve() !== OkpKey::CURVE_ED25519) {
-            throw new InvalidArgumentException('Unsupported curve');
+            new InvalidArgumentException('Unsupported curve');
         }
         try {
             sodium_crypto_sign_verify_detached($signature, $data, $key->x());


146) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/EdDSA/EdDSA.php:41    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
             throw new InvalidArgumentException('Unsupported curve');
         }
         try {
-            sodium_crypto_sign_verify_detached($signature, $data, $key->x());
+            
         } catch (Throwable) {
             return false;
         }


147) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/EdDSA/EdDSA.php:43    [M] FalseValue

--- Original
+++ New
@@ @@
         try {
             sodium_crypto_sign_verify_detached($signature, $data, $key->x());
         } catch (Throwable) {
-            return false;
+            return true;
         }
         return true;
     }


148) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/EdDSA/EdDSA.php:46    [M] TrueValue

--- Original
+++ New
@@ @@
         } catch (Throwable) {
             return false;
         }
-        return true;
+        return false;
     }
     public static function identifier() : int
     {


149) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PS256.php:13    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class PS256 extends PSSRSA
 {
     public const ID = -37;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


150) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PS384.php:13    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class PS384 extends PSSRSA
 {
     public const ID = -38;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


151) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PS512.php:13    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class PS512 extends PSSRSA
 {
     public const ID = -39;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


152) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:34    [M] MBString

--- Original
+++ New
@@ @@
     public function sign(string $data, Key $key) : string
     {
         $key = $this->handleKey($key);
-        $modulusLength = mb_strlen($key->n(), '8bit');
+        $modulusLength = strlen($key->n());
         $em = $this->encodeEMSAPSS($data, 8 * $modulusLength - 1, $this->getHashAlgorithm());
         $message = BigInteger::createFromBinaryString($em);
         $signature = $this->exponentiate($key, $message);


153) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:36    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $key = $this->handleKey($key);
         $modulusLength = mb_strlen($key->n(), '8bit');
-        $em = $this->encodeEMSAPSS($data, 8 * $modulusLength - 1, $this->getHashAlgorithm());
+        $em = $this->encodeEMSAPSS($data, 7 * $modulusLength - 1, $this->getHashAlgorithm());
         $message = BigInteger::createFromBinaryString($em);
         $signature = $this->exponentiate($key, $message);
         return $this->convertIntegerToOctetString($signature, $modulusLength);


154) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:36    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         $key = $this->handleKey($key);
         $modulusLength = mb_strlen($key->n(), '8bit');
-        $em = $this->encodeEMSAPSS($data, 8 * $modulusLength - 1, $this->getHashAlgorithm());
+        $em = $this->encodeEMSAPSS($data, 9 * $modulusLength - 1, $this->getHashAlgorithm());
         $message = BigInteger::createFromBinaryString($em);
         $signature = $this->exponentiate($key, $message);
         return $this->convertIntegerToOctetString($signature, $modulusLength);


155) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:36    [M] Multiplication

--- Original
+++ New
@@ @@
     {
         $key = $this->handleKey($key);
         $modulusLength = mb_strlen($key->n(), '8bit');
-        $em = $this->encodeEMSAPSS($data, 8 * $modulusLength - 1, $this->getHashAlgorithm());
+        $em = $this->encodeEMSAPSS($data, 8 / $modulusLength - 1, $this->getHashAlgorithm());
         $message = BigInteger::createFromBinaryString($em);
         $signature = $this->exponentiate($key, $message);
         return $this->convertIntegerToOctetString($signature, $modulusLength);


156) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:36    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $key = $this->handleKey($key);
         $modulusLength = mb_strlen($key->n(), '8bit');
-        $em = $this->encodeEMSAPSS($data, 8 * $modulusLength - 1, $this->getHashAlgorithm());
+        $em = $this->encodeEMSAPSS($data, 8 * $modulusLength - 0, $this->getHashAlgorithm());
         $message = BigInteger::createFromBinaryString($em);
         $signature = $this->exponentiate($key, $message);
         return $this->convertIntegerToOctetString($signature, $modulusLength);


157) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:36    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         $key = $this->handleKey($key);
         $modulusLength = mb_strlen($key->n(), '8bit');
-        $em = $this->encodeEMSAPSS($data, 8 * $modulusLength - 1, $this->getHashAlgorithm());
+        $em = $this->encodeEMSAPSS($data, 8 * $modulusLength - 2, $this->getHashAlgorithm());
         $message = BigInteger::createFromBinaryString($em);
         $signature = $this->exponentiate($key, $message);
         return $this->convertIntegerToOctetString($signature, $modulusLength);


158) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:36    [M] Minus

--- Original
+++ New
@@ @@
     {
         $key = $this->handleKey($key);
         $modulusLength = mb_strlen($key->n(), '8bit');
-        $em = $this->encodeEMSAPSS($data, 8 * $modulusLength - 1, $this->getHashAlgorithm());
+        $em = $this->encodeEMSAPSS($data, 8 * $modulusLength + 1, $this->getHashAlgorithm());
         $message = BigInteger::createFromBinaryString($em);
         $signature = $this->exponentiate($key, $message);
         return $this->convertIntegerToOctetString($signature, $modulusLength);


159) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:46    [M] MBString

--- Original
+++ New
@@ @@
     public function verify(string $data, Key $key, string $signature) : bool
     {
         $key = $this->handleKey($key);
-        $modulusLength = mb_strlen($key->n(), '8bit');
+        $modulusLength = strlen($key->n());
         if (mb_strlen($signature, '8bit') !== $modulusLength) {
             throw new InvalidArgumentException('Invalid modulus length');
         }


160) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:48    [M] MBString

--- Original
+++ New
@@ @@
     {
         $key = $this->handleKey($key);
         $modulusLength = mb_strlen($key->n(), '8bit');
-        if (mb_strlen($signature, '8bit') !== $modulusLength) {
+        if (strlen($signature) !== $modulusLength) {
             throw new InvalidArgumentException('Invalid modulus length');
         }
         $s2 = BigInteger::createFromBinaryString($signature);


161) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:48    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
         $key = $this->handleKey($key);
         $modulusLength = mb_strlen($key->n(), '8bit');
-        if (mb_strlen($signature, '8bit') !== $modulusLength) {
+        if (mb_strlen($signature, '8bit') === $modulusLength) {
             throw new InvalidArgumentException('Invalid modulus length');
         }
         $s2 = BigInteger::createFromBinaryString($signature);


162) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:49    [M] Throw_

--- Original
+++ New
@@ @@
         $key = $this->handleKey($key);
         $modulusLength = mb_strlen($key->n(), '8bit');
         if (mb_strlen($signature, '8bit') !== $modulusLength) {
-            throw new InvalidArgumentException('Invalid modulus length');
+            new InvalidArgumentException('Invalid modulus length');
         }
         $s2 = BigInteger::createFromBinaryString($signature);
         $m2 = $this->exponentiate($key, $s2);


163) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:54    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $s2 = BigInteger::createFromBinaryString($signature);
         $m2 = $this->exponentiate($key, $s2);
         $em = $this->convertIntegerToOctetString($m2, $modulusLength);
-        $modBits = 8 * $modulusLength;
+        $modBits = 7 * $modulusLength;
         return $this->verifyEMSAPSS($data, $em, $modBits - 1, $this->getHashAlgorithm());
     }
     /**


164) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:54    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $s2 = BigInteger::createFromBinaryString($signature);
         $m2 = $this->exponentiate($key, $s2);
         $em = $this->convertIntegerToOctetString($m2, $modulusLength);
-        $modBits = 8 * $modulusLength;
+        $modBits = 9 * $modulusLength;
         return $this->verifyEMSAPSS($data, $em, $modBits - 1, $this->getHashAlgorithm());
     }
     /**


165) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:54    [M] Multiplication

--- Original
+++ New
@@ @@
         $s2 = BigInteger::createFromBinaryString($signature);
         $m2 = $this->exponentiate($key, $s2);
         $em = $this->convertIntegerToOctetString($m2, $modulusLength);
-        $modBits = 8 * $modulusLength;
+        $modBits = 8 / $modulusLength;
         return $this->verifyEMSAPSS($data, $em, $modBits - 1, $this->getHashAlgorithm());
     }
     /**


166) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:56    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $m2 = $this->exponentiate($key, $s2);
         $em = $this->convertIntegerToOctetString($m2, $modulusLength);
         $modBits = 8 * $modulusLength;
-        return $this->verifyEMSAPSS($data, $em, $modBits - 1, $this->getHashAlgorithm());
+        return $this->verifyEMSAPSS($data, $em, $modBits - 0, $this->getHashAlgorithm());
     }
     /**
      * Exponentiate with or without Chinese Remainder Theorem. Operation with primes 'p' and 'q' is appox. 2x faster.


167) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:56    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $m2 = $this->exponentiate($key, $s2);
         $em = $this->convertIntegerToOctetString($m2, $modulusLength);
         $modBits = 8 * $modulusLength;
-        return $this->verifyEMSAPSS($data, $em, $modBits - 1, $this->getHashAlgorithm());
+        return $this->verifyEMSAPSS($data, $em, $modBits - 2, $this->getHashAlgorithm());
     }
     /**
      * Exponentiate with or without Chinese Remainder Theorem. Operation with primes 'p' and 'q' is appox. 2x faster.


168) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:56    [M] Minus

--- Original
+++ New
@@ @@
         $m2 = $this->exponentiate($key, $s2);
         $em = $this->convertIntegerToOctetString($m2, $modulusLength);
         $modBits = 8 * $modulusLength;
-        return $this->verifyEMSAPSS($data, $em, $modBits - 1, $this->getHashAlgorithm());
+        return $this->verifyEMSAPSS($data, $em, $modBits + 1, $this->getHashAlgorithm());
     }
     /**
      * Exponentiate with or without Chinese Remainder Theorem. Operation with primes 'p' and 'q' is appox. 2x faster.


169) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:62    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Exponentiate with or without Chinese Remainder Theorem. Operation with primes 'p' and 'q' is appox. 2x faster.
      */
-    public function exponentiate(RsaKey $key, BigInteger $c) : BigInteger
+    protected function exponentiate(RsaKey $key, BigInteger $c) : BigInteger
     {
         if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
             throw new RuntimeException();


170) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:64    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     public function exponentiate(RsaKey $key, BigInteger $c) : BigInteger
     {
-        if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
+        if ($c->compare(BigInteger::createFromDecimal(-1)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
             throw new RuntimeException();
         }
         if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {


171) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:64    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     public function exponentiate(RsaKey $key, BigInteger $c) : BigInteger
     {
-        if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
+        if ($c->compare(BigInteger::createFromDecimal(1)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
             throw new RuntimeException();
         }
         if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {


172) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:64    [M] LessThan

--- Original
+++ New
@@ @@
      */
     public function exponentiate(RsaKey $key, BigInteger $c) : BigInteger
     {
-        if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
+        if ($c->compare(BigInteger::createFromDecimal(0)) <= 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
             throw new RuntimeException();
         }
         if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {


173) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:64    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
      */
     public function exponentiate(RsaKey $key, BigInteger $c) : BigInteger
     {
-        if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
+        if ($c->compare(BigInteger::createFromDecimal(0)) >= 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
             throw new RuntimeException();
         }
         if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {


174) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:64    [M] GreaterThan

--- Original
+++ New
@@ @@
      */
     public function exponentiate(RsaKey $key, BigInteger $c) : BigInteger
     {
-        if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
+        if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) >= 0) {
             throw new RuntimeException();
         }
         if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {


175) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:64    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
      */
     public function exponentiate(RsaKey $key, BigInteger $c) : BigInteger
     {
-        if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
+        if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) <= 0) {
             throw new RuntimeException();
         }
         if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {


176) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:64    [M] LogicalOr

--- Original
+++ New
@@ @@
      */
     public function exponentiate(RsaKey $key, BigInteger $c) : BigInteger
     {
-        if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
+        if ($c->compare(BigInteger::createFromDecimal(0)) < 0 && $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
             throw new RuntimeException();
         }
         if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {


177) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:67    [M] Throw_

--- Original
+++ New
@@ @@
     public function exponentiate(RsaKey $key, BigInteger $c) : BigInteger
     {
         if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
-            throw new RuntimeException();
+            new RuntimeException();
         }
         if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {
             return $c->modPow(BigInteger::createFromBinaryString($key->e()), BigInteger::createFromBinaryString($key->n()));


178) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:69    [M] LogicalNot

--- Original
+++ New
@@ @@
         if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
             throw new RuntimeException();
         }
-        if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {
+        if ($key->isPublic() || $key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {
             return $c->modPow(BigInteger::createFromBinaryString($key->e()), BigInteger::createFromBinaryString($key->n()));
         }
         [$pS, $qS] = $key->primes();


179) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:69    [M] LogicalOr

--- Original
+++ New
@@ @@
         if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
             throw new RuntimeException();
         }
-        if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {
+        if ($key->isPublic() && !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {
             return $c->modPow(BigInteger::createFromBinaryString($key->e()), BigInteger::createFromBinaryString($key->n()));
         }
         [$pS, $qS] = $key->primes();


180) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:69    [M] LogicalNot

--- Original
+++ New
@@ @@
         if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
             throw new RuntimeException();
         }
-        if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {
+        if ($key->isPublic() || !$key->hasPrimes() || $key->hasExponents() || !$key->hasCoefficient()) {
             return $c->modPow(BigInteger::createFromBinaryString($key->e()), BigInteger::createFromBinaryString($key->n()));
         }
         [$pS, $qS] = $key->primes();


181) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:69    [M] LogicalOr

--- Original
+++ New
@@ @@
         if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
             throw new RuntimeException();
         }
-        if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {
+        if (($key->isPublic() || !$key->hasPrimes()) && !$key->hasExponents() || !$key->hasCoefficient()) {
             return $c->modPow(BigInteger::createFromBinaryString($key->e()), BigInteger::createFromBinaryString($key->n()));
         }
         [$pS, $qS] = $key->primes();


182) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:69    [M] LogicalNot

--- Original
+++ New
@@ @@
         if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
             throw new RuntimeException();
         }
-        if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {
+        if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || $key->hasCoefficient()) {
             return $c->modPow(BigInteger::createFromBinaryString($key->e()), BigInteger::createFromBinaryString($key->n()));
         }
         [$pS, $qS] = $key->primes();


183) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:69    [M] LogicalOr

--- Original
+++ New
@@ @@
         if ($c->compare(BigInteger::createFromDecimal(0)) < 0 || $c->compare(BigInteger::createFromBinaryString($key->n())) > 0) {
             throw new RuntimeException();
         }
-        if ($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents() || !$key->hasCoefficient()) {
+        if (($key->isPublic() || !$key->hasPrimes() || !$key->hasExponents()) && !$key->hasCoefficient()) {
             return $c->modPow(BigInteger::createFromBinaryString($key->e()), BigInteger::createFromBinaryString($key->n()));
         }
         [$pS, $qS] = $key->primes();


184) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:103    [M] MBString

--- Original
+++ New
@@ @@
     private function convertIntegerToOctetString(BigInteger $x, int $xLen) : string
     {
         $xB = $x->toBytes();
-        if (mb_strlen($xB, '8bit') > $xLen) {
+        if (strlen($xB) > $xLen) {
             throw new RuntimeException('Unable to convert the integer');
         }
         return str_pad($xB, $xLen, chr(0), STR_PAD_LEFT);


185) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:103    [M] GreaterThan

--- Original
+++ New
@@ @@
     private function convertIntegerToOctetString(BigInteger $x, int $xLen) : string
     {
         $xB = $x->toBytes();
-        if (mb_strlen($xB, '8bit') > $xLen) {
+        if (mb_strlen($xB, '8bit') >= $xLen) {
             throw new RuntimeException('Unable to convert the integer');
         }
         return str_pad($xB, $xLen, chr(0), STR_PAD_LEFT);


186) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:103    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
     private function convertIntegerToOctetString(BigInteger $x, int $xLen) : string
     {
         $xB = $x->toBytes();
-        if (mb_strlen($xB, '8bit') > $xLen) {
+        if (mb_strlen($xB, '8bit') <= $xLen) {
             throw new RuntimeException('Unable to convert the integer');
         }
         return str_pad($xB, $xLen, chr(0), STR_PAD_LEFT);


187) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:104    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $xB = $x->toBytes();
         if (mb_strlen($xB, '8bit') > $xLen) {
-            throw new RuntimeException('Unable to convert the integer');
+            new RuntimeException('Unable to convert the integer');
         }
         return str_pad($xB, $xLen, chr(0), STR_PAD_LEFT);
     }


188) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:107    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if (mb_strlen($xB, '8bit') > $xLen) {
             throw new RuntimeException('Unable to convert the integer');
         }
-        return str_pad($xB, $xLen, chr(0), STR_PAD_LEFT);
+        return str_pad($xB, $xLen, chr(-1), STR_PAD_LEFT);
     }
     /**
      * MGF1.


189) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:107    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if (mb_strlen($xB, '8bit') > $xLen) {
             throw new RuntimeException('Unable to convert the integer');
         }
-        return str_pad($xB, $xLen, chr(0), STR_PAD_LEFT);
+        return str_pad($xB, $xLen, chr(1), STR_PAD_LEFT);
     }
     /**
      * MGF1.


190) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:116    [M] Division

--- Original
+++ New
@@ @@
     private function getMGF1(string $mgfSeed, int $maskLen, Hash $mgfHash) : string
     {
         $t = '';
-        $count = ceil($maskLen / $mgfHash->getLength());
+        $count = ceil($maskLen * $mgfHash->getLength());
         for ($i = 0; $i < $count; ++$i) {
             $c = pack('N', $i);
             $t .= $mgfHash->hash($mgfSeed . $c);


191) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:116    [M] RoundingFamily

--- Original
+++ New
@@ @@
     private function getMGF1(string $mgfSeed, int $maskLen, Hash $mgfHash) : string
     {
         $t = '';
-        $count = ceil($maskLen / $mgfHash->getLength());
+        $count = floor($maskLen / $mgfHash->getLength());
         for ($i = 0; $i < $count; ++$i) {
             $c = pack('N', $i);
             $t .= $mgfHash->hash($mgfSeed . $c);


192) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:116    [M] RoundingFamily

--- Original
+++ New
@@ @@
     private function getMGF1(string $mgfSeed, int $maskLen, Hash $mgfHash) : string
     {
         $t = '';
-        $count = ceil($maskLen / $mgfHash->getLength());
+        $count = round($maskLen / $mgfHash->getLength());
         for ($i = 0; $i < $count; ++$i) {
             $c = pack('N', $i);
             $t .= $mgfHash->hash($mgfSeed . $c);


193) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:117    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $t = '';
         $count = ceil($maskLen / $mgfHash->getLength());
-        for ($i = 0; $i < $count; ++$i) {
+        for ($i = -1; $i < $count; ++$i) {
             $c = pack('N', $i);
             $t .= $mgfHash->hash($mgfSeed . $c);
         }


194) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:117    [M] LessThan

--- Original
+++ New
@@ @@
     {
         $t = '';
         $count = ceil($maskLen / $mgfHash->getLength());
-        for ($i = 0; $i < $count; ++$i) {
+        for ($i = 0; $i <= $count; ++$i) {
             $c = pack('N', $i);
             $t .= $mgfHash->hash($mgfSeed . $c);
         }


195) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:117    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
     {
         $t = '';
         $count = ceil($maskLen / $mgfHash->getLength());
-        for ($i = 0; $i < $count; ++$i) {
+        for ($i = 0; $i >= $count; ++$i) {
             $c = pack('N', $i);
             $t .= $mgfHash->hash($mgfSeed . $c);
         }


196) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:117    [M] Increment

--- Original
+++ New
@@ @@
     {
         $t = '';
         $count = ceil($maskLen / $mgfHash->getLength());
-        for ($i = 0; $i < $count; ++$i) {
+        for ($i = 0; $i < $count; --$i) {
             $c = pack('N', $i);
             $t .= $mgfHash->hash($mgfSeed . $c);
         }


197) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:117    [M] For_

--- Original
+++ New
@@ @@
     {
         $t = '';
         $count = ceil($maskLen / $mgfHash->getLength());
-        for ($i = 0; $i < $count; ++$i) {
+        for ($i = 0; false; ++$i) {
             $c = pack('N', $i);
             $t .= $mgfHash->hash($mgfSeed . $c);
         }


198) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:119    [M] Concat

--- Original
+++ New
@@ @@
         $count = ceil($maskLen / $mgfHash->getLength());
         for ($i = 0; $i < $count; ++$i) {
             $c = pack('N', $i);
-            $t .= $mgfHash->hash($mgfSeed . $c);
+            $t .= $mgfHash->hash($c . $mgfSeed);
         }
         return mb_substr($t, 0, $maskLen, '8bit');
     }


199) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:119    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $count = ceil($maskLen / $mgfHash->getLength());
         for ($i = 0; $i < $count; ++$i) {
             $c = pack('N', $i);
-            $t .= $mgfHash->hash($mgfSeed . $c);
+            $t .= $mgfHash->hash($c);
         }
         return mb_substr($t, 0, $maskLen, '8bit');
     }


200) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:119    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $count = ceil($maskLen / $mgfHash->getLength());
         for ($i = 0; $i < $count; ++$i) {
             $c = pack('N', $i);
-            $t .= $mgfHash->hash($mgfSeed . $c);
+            $t .= $mgfHash->hash($mgfSeed);
         }
         return mb_substr($t, 0, $maskLen, '8bit');
     }


201) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:119    [M] Assignment

--- Original
+++ New
@@ @@
         $count = ceil($maskLen / $mgfHash->getLength());
         for ($i = 0; $i < $count; ++$i) {
             $c = pack('N', $i);
-            $t .= $mgfHash->hash($mgfSeed . $c);
+            $t = $mgfHash->hash($mgfSeed . $c);
         }
         return mb_substr($t, 0, $maskLen, '8bit');
     }


202) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:122    [M] DecrementInteger

--- Original
+++ New
@@ @@
             $c = pack('N', $i);
             $t .= $mgfHash->hash($mgfSeed . $c);
         }
-        return mb_substr($t, 0, $maskLen, '8bit');
+        return mb_substr($t, -1, $maskLen, '8bit');
     }
     /**
      * EMSA-PSS-ENCODE.


203) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:122    [M] IncrementInteger

--- Original
+++ New
@@ @@
             $c = pack('N', $i);
             $t .= $mgfHash->hash($mgfSeed . $c);
         }
-        return mb_substr($t, 0, $maskLen, '8bit');
+        return mb_substr($t, 1, $maskLen, '8bit');
     }
     /**
      * EMSA-PSS-ENCODE.


204) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:122    [M] MBString

--- Original
+++ New
@@ @@
             $c = pack('N', $i);
             $t .= $mgfHash->hash($mgfSeed . $c);
         }
-        return mb_substr($t, 0, $maskLen, '8bit');
+        return substr($t, 0, $maskLen);
     }
     /**
      * EMSA-PSS-ENCODE.


205) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:130    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     private function encodeEMSAPSS(string $message, int $modulusLength, Hash $hash) : string
     {
-        $emLen = $modulusLength + 1 >> 3;
+        $emLen = $modulusLength + 0 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
         if ($emLen <= $hash->getLength() + $sLen + 2) {


206) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:130    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     private function encodeEMSAPSS(string $message, int $modulusLength, Hash $hash) : string
     {
-        $emLen = $modulusLength + 1 >> 3;
+        $emLen = $modulusLength + 2 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
         if ($emLen <= $hash->getLength() + $sLen + 2) {


207) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:130    [M] Plus

--- Original
+++ New
@@ @@
      */
     private function encodeEMSAPSS(string $message, int $modulusLength, Hash $hash) : string
     {
-        $emLen = $modulusLength + 1 >> 3;
+        $emLen = $modulusLength - 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
         if ($emLen <= $hash->getLength() + $sLen + 2) {


208) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:130    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     private function encodeEMSAPSS(string $message, int $modulusLength, Hash $hash) : string
     {
-        $emLen = $modulusLength + 1 >> 3;
+        $emLen = $modulusLength + 1 >> 2;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
         if ($emLen <= $hash->getLength() + $sLen + 2) {


209) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:130    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     private function encodeEMSAPSS(string $message, int $modulusLength, Hash $hash) : string
     {
-        $emLen = $modulusLength + 1 >> 3;
+        $emLen = $modulusLength + 1 >> 4;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
         if ($emLen <= $hash->getLength() + $sLen + 2) {


210) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:130    [M] ShiftRight

--- Original
+++ New
@@ @@
      */
     private function encodeEMSAPSS(string $message, int $modulusLength, Hash $hash) : string
     {
-        $emLen = $modulusLength + 1 >> 3;
+        $emLen = $modulusLength + 1 << 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
         if ($emLen <= $hash->getLength() + $sLen + 2) {


211) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:133    [M] Plus

--- Original
+++ New
@@ @@
         $emLen = $modulusLength + 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
-        if ($emLen <= $hash->getLength() + $sLen + 2) {
+        if ($emLen <= $hash->getLength() - $sLen + 2) {
             throw new RuntimeException();
         }
         $salt = random_bytes($sLen);


212) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:133    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $emLen = $modulusLength + 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
-        if ($emLen <= $hash->getLength() + $sLen + 2) {
+        if ($emLen <= $hash->getLength() + $sLen + 1) {
             throw new RuntimeException();
         }
         $salt = random_bytes($sLen);


213) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:133    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $emLen = $modulusLength + 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
-        if ($emLen <= $hash->getLength() + $sLen + 2) {
+        if ($emLen <= $hash->getLength() + $sLen + 3) {
             throw new RuntimeException();
         }
         $salt = random_bytes($sLen);


214) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:133    [M] Plus

--- Original
+++ New
@@ @@
         $emLen = $modulusLength + 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
-        if ($emLen <= $hash->getLength() + $sLen + 2) {
+        if ($emLen <= $hash->getLength() + $sLen - 2) {
             throw new RuntimeException();
         }
         $salt = random_bytes($sLen);


215) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:133    [M] LessThanOrEqualTo

--- Original
+++ New
@@ @@
         $emLen = $modulusLength + 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
-        if ($emLen <= $hash->getLength() + $sLen + 2) {
+        if ($emLen < $hash->getLength() + $sLen + 2) {
             throw new RuntimeException();
         }
         $salt = random_bytes($sLen);


216) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:133    [M] LessThanOrEqualToNegotiation

--- Original
+++ New
@@ @@
         $emLen = $modulusLength + 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
-        if ($emLen <= $hash->getLength() + $sLen + 2) {
+        if ($emLen > $hash->getLength() + $sLen + 2) {
             throw new RuntimeException();
         }
         $salt = random_bytes($sLen);


217) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:134    [M] Throw_

--- Original
+++ New
@@ @@
         $sLen = $hash->getLength();
         $mHash = $hash->hash($message);
         if ($emLen <= $hash->getLength() + $sLen + 2) {
-            throw new RuntimeException();
+            new RuntimeException();
         }
         $salt = random_bytes($sLen);
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;


218) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:137    [M] Concat

--- Original
+++ New
@@ @@
             throw new RuntimeException();
         }
         $salt = random_bytes($sLen);
-        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
+        $m2 = $mHash . "\x00\x00\x00\x00\x00\x00\x00\x00" . $salt;
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;


219) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:137    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
             throw new RuntimeException();
         }
         $salt = random_bytes($sLen);
-        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
+        $m2 = $mHash . $salt;
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;


220) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:137    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
             throw new RuntimeException();
         }
         $salt = random_bytes($sLen);
-        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
+        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $salt;
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;


221) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:137    [M] Concat

--- Original
+++ New
@@ @@
             throw new RuntimeException();
         }
         $salt = random_bytes($sLen);
-        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
+        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $salt . $mHash;
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;


222) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:137    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
             throw new RuntimeException();
         }
         $salt = random_bytes($sLen);
-        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
+        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash;
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;


223) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:139    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $salt = random_bytes($sLen);
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
-        $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
+        $ps = str_repeat(chr(-1), $emLen - $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;


224) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:139    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $salt = random_bytes($sLen);
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
-        $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
+        $ps = str_repeat(chr(1), $emLen - $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;


225) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:139    [M] Minus

--- Original
+++ New
@@ @@
         $salt = random_bytes($sLen);
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
-        $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
+        $ps = str_repeat(chr(0), $emLen + $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;


226) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:139    [M] Minus

--- Original
+++ New
@@ @@
         $salt = random_bytes($sLen);
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
-        $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
+        $ps = str_repeat(chr(0), $emLen - $sLen + $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;


227) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:139    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $salt = random_bytes($sLen);
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
-        $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
+        $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 1);
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;


228) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:139    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $salt = random_bytes($sLen);
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
-        $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
+        $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 3);
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;


229) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:139    [M] Minus

--- Original
+++ New
@@ @@
         $salt = random_bytes($sLen);
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
-        $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
+        $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() + 2);
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;


230) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:139    [M] UnwrapStrRepeat

--- Original
+++ New
@@ @@
         $salt = random_bytes($sLen);
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
-        $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
+        $ps = chr(0);
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;


231) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:140    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
-        $db = $ps . chr(1) . $salt;
+        $db = $ps . chr(0) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];


232) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:140    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
-        $db = $ps . chr(1) . $salt;
+        $db = $ps . chr(2) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];


233) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:140    [M] Concat

--- Original
+++ New
@@ @@
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
-        $db = $ps . chr(1) . $salt;
+        $db = chr(1) . $ps . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];


234) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:140    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
-        $db = $ps . chr(1) . $salt;
+        $db = chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];


235) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:140    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
-        $db = $ps . chr(1) . $salt;
+        $db = $ps . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];


236) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:140    [M] Concat

--- Original
+++ New
@@ @@
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
-        $db = $ps . chr(1) . $salt;
+        $db = $ps . $salt . chr(1);
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];


237) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:140    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
-        $db = $ps . chr(1) . $salt;
+        $db = $ps . chr(1);
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];


238) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:141    [M] Minus

--- Original
+++ New
@@ @@
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;
-        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
+        $dbMask = $this->getMGF1($h, $emLen + $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);


239) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:141    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;
-        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
+        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 0, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);


240) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:141    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;
-        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
+        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 2, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);


241) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:141    [M] Minus

--- Original
+++ New
@@ @@
         $h = $hash->hash($m2);
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;
-        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
+        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() + 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);


242) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:142    [M] BitwiseXor

--- Original
+++ New
@@ @@
         $ps = str_repeat(chr(0), $emLen - $sLen - $hash->getLength() - 2);
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
-        $maskedDB = $db ^ $dbMask;
+        $maskedDB = $db & $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);
     }


243) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:143    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
-        $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
+        $maskedDB[1] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);
     }
     /**


244) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:143    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
-        $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
+        $maskedDB[0] = ~chr(254 << ($modulusLength & 7)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);
     }
     /**


245) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:143    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
-        $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
+        $maskedDB[0] = ~chr(256 << ($modulusLength & 7)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);
     }
     /**


246) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:143    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
-        $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
+        $maskedDB[0] = ~chr(0xff << ($modulusLength & 6)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);
     }
     /**


247) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:143    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
-        $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
+        $maskedDB[0] = ~chr(0xff << ($modulusLength & 8)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);
     }
     /**


248) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:143    [M] BitwiseAnd

--- Original
+++ New
@@ @@
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
-        $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
+        $maskedDB[0] = ~chr(0xff << ($modulusLength | 7)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);
     }
     /**


249) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:143    [M] ShiftLeft

--- Original
+++ New
@@ @@
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
-        $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
+        $maskedDB[0] = ~chr(0xff >> ($modulusLength & 7)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);
     }
     /**


250) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:143    [M] BitwiseNot

--- Original
+++ New
@@ @@
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
-        $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
+        $maskedDB[0] = chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);
     }
     /**


251) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:143    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
-        $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
+        $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[1];
         return $maskedDB . $h . chr(0xbc);
     }
     /**


252) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:143    [M] BitwiseAnd

--- Original
+++ New
@@ @@
         $db = $ps . chr(1) . $salt;
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
-        $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
+        $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) | $maskedDB[0];
         return $maskedDB . $h . chr(0xbc);
     }
     /**


253) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:145    [M] Concat

--- Original
+++ New
@@ @@
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
-        return $maskedDB . $h . chr(0xbc);
+        return $h . $maskedDB . chr(0xbc);
     }
     /**
      * EMSA-PSS-VERIFY.


254) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:145    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
-        return $maskedDB . $h . chr(0xbc);
+        return $h . chr(0xbc);
     }
     /**
      * EMSA-PSS-VERIFY.


255) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:145    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
-        return $maskedDB . $h . chr(0xbc);
+        return $maskedDB . chr(0xbc);
     }
     /**
      * EMSA-PSS-VERIFY.


256) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:145    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
-        return $maskedDB . $h . chr(0xbc);
+        return $maskedDB . $h . chr(187);
     }
     /**
      * EMSA-PSS-VERIFY.


257) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:145    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
-        return $maskedDB . $h . chr(0xbc);
+        return $maskedDB . $h . chr(189);
     }
     /**
      * EMSA-PSS-VERIFY.


258) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:145    [M] Concat

--- Original
+++ New
@@ @@
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
-        return $maskedDB . $h . chr(0xbc);
+        return $maskedDB . chr(0xbc) . $h;
     }
     /**
      * EMSA-PSS-VERIFY.


259) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:145    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $maskedDB = $db ^ $dbMask;
         $maskedDB[0] = ~chr(0xff << ($modulusLength & 7)) & $maskedDB[0];
-        return $maskedDB . $h . chr(0xbc);
+        return $maskedDB . $h;
     }
     /**
      * EMSA-PSS-VERIFY.


260) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:153    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     private function verifyEMSAPSS(string $m, string $em, int $emBits, Hash $hash) : bool
     {
-        $emLen = $emBits + 1 >> 3;
+        $emLen = $emBits + 0 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
         if ($emLen < $hash->getLength() + $sLen + 2) {


261) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:153    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     private function verifyEMSAPSS(string $m, string $em, int $emBits, Hash $hash) : bool
     {
-        $emLen = $emBits + 1 >> 3;
+        $emLen = $emBits + 2 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
         if ($emLen < $hash->getLength() + $sLen + 2) {


262) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:153    [M] Plus

--- Original
+++ New
@@ @@
      */
     private function verifyEMSAPSS(string $m, string $em, int $emBits, Hash $hash) : bool
     {
-        $emLen = $emBits + 1 >> 3;
+        $emLen = $emBits - 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
         if ($emLen < $hash->getLength() + $sLen + 2) {


263) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:153    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     private function verifyEMSAPSS(string $m, string $em, int $emBits, Hash $hash) : bool
     {
-        $emLen = $emBits + 1 >> 3;
+        $emLen = $emBits + 1 >> 2;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
         if ($emLen < $hash->getLength() + $sLen + 2) {


264) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:153    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     private function verifyEMSAPSS(string $m, string $em, int $emBits, Hash $hash) : bool
     {
-        $emLen = $emBits + 1 >> 3;
+        $emLen = $emBits + 1 >> 4;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
         if ($emLen < $hash->getLength() + $sLen + 2) {


265) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:153    [M] ShiftRight

--- Original
+++ New
@@ @@
      */
     private function verifyEMSAPSS(string $m, string $em, int $emBits, Hash $hash) : bool
     {
-        $emLen = $emBits + 1 >> 3;
+        $emLen = $emBits + 1 << 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
         if ($emLen < $hash->getLength() + $sLen + 2) {


266) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:156    [M] Plus

--- Original
+++ New
@@ @@
         $emLen = $emBits + 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
-        if ($emLen < $hash->getLength() + $sLen + 2) {
+        if ($emLen < $hash->getLength() - $sLen + 2) {
             throw new InvalidArgumentException();
         }
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {


267) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:156    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $emLen = $emBits + 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
-        if ($emLen < $hash->getLength() + $sLen + 2) {
+        if ($emLen < $hash->getLength() + $sLen + 1) {
             throw new InvalidArgumentException();
         }
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {


268) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:156    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $emLen = $emBits + 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
-        if ($emLen < $hash->getLength() + $sLen + 2) {
+        if ($emLen < $hash->getLength() + $sLen + 3) {
             throw new InvalidArgumentException();
         }
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {


269) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:156    [M] Plus

--- Original
+++ New
@@ @@
         $emLen = $emBits + 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
-        if ($emLen < $hash->getLength() + $sLen + 2) {
+        if ($emLen < $hash->getLength() + $sLen - 2) {
             throw new InvalidArgumentException();
         }
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {


270) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:156    [M] LessThan

--- Original
+++ New
@@ @@
         $emLen = $emBits + 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
-        if ($emLen < $hash->getLength() + $sLen + 2) {
+        if ($emLen <= $hash->getLength() + $sLen + 2) {
             throw new InvalidArgumentException();
         }
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {


271) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:156    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
         $emLen = $emBits + 1 >> 3;
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
-        if ($emLen < $hash->getLength() + $sLen + 2) {
+        if ($emLen >= $hash->getLength() + $sLen + 2) {
             throw new InvalidArgumentException();
         }
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {


272) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:157    [M] Throw_

--- Original
+++ New
@@ @@
         $sLen = $hash->getLength();
         $mHash = $hash->hash($m);
         if ($emLen < $hash->getLength() + $sLen + 2) {
-            throw new InvalidArgumentException();
+            new InvalidArgumentException();
         }
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
             throw new InvalidArgumentException();


273) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:159    [M] MBString

--- Original
+++ New
@@ @@
         if ($emLen < $hash->getLength() + $sLen + 2) {
             throw new InvalidArgumentException();
         }
-        if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
+        if ($em[strlen($em) - 1] !== chr(0xbc)) {
             throw new InvalidArgumentException();
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');


274) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:159    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if ($emLen < $hash->getLength() + $sLen + 2) {
             throw new InvalidArgumentException();
         }
-        if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
+        if ($em[mb_strlen($em, '8bit') - 0] !== chr(0xbc)) {
             throw new InvalidArgumentException();
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');


275) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:159    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if ($emLen < $hash->getLength() + $sLen + 2) {
             throw new InvalidArgumentException();
         }
-        if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
+        if ($em[mb_strlen($em, '8bit') - 2] !== chr(0xbc)) {
             throw new InvalidArgumentException();
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');


276) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:159    [M] Minus

--- Original
+++ New
@@ @@
         if ($emLen < $hash->getLength() + $sLen + 2) {
             throw new InvalidArgumentException();
         }
-        if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
+        if ($em[mb_strlen($em, '8bit') + 1] !== chr(0xbc)) {
             throw new InvalidArgumentException();
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');


277) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:159    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if ($emLen < $hash->getLength() + $sLen + 2) {
             throw new InvalidArgumentException();
         }
-        if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
+        if ($em[mb_strlen($em, '8bit') - 1] !== chr(187)) {
             throw new InvalidArgumentException();
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');


278) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:159    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if ($emLen < $hash->getLength() + $sLen + 2) {
             throw new InvalidArgumentException();
         }
-        if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
+        if ($em[mb_strlen($em, '8bit') - 1] !== chr(189)) {
             throw new InvalidArgumentException();
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');


279) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:159    [M] NotIdentical

--- Original
+++ New
@@ @@
         if ($emLen < $hash->getLength() + $sLen + 2) {
             throw new InvalidArgumentException();
         }
-        if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
+        if ($em[mb_strlen($em, '8bit') - 1] === chr(0xbc)) {
             throw new InvalidArgumentException();
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');


280) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:160    [M] Throw_

--- Original
+++ New
@@ @@
             throw new InvalidArgumentException();
         }
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
-            throw new InvalidArgumentException();
+            new InvalidArgumentException();
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');


281) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:162    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
             throw new InvalidArgumentException();
         }
-        $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
+        $maskedDB = mb_substr($em, -1, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {


282) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:162    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
             throw new InvalidArgumentException();
         }
-        $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
+        $maskedDB = mb_substr($em, 1, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {


283) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:162    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
             throw new InvalidArgumentException();
         }
-        $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
+        $maskedDB = mb_substr($em, 0, -$hash->getLength() - 0, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {


284) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:162    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
             throw new InvalidArgumentException();
         }
-        $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
+        $maskedDB = mb_substr($em, 0, -$hash->getLength() - 2, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {


285) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:162    [M] Minus

--- Original
+++ New
@@ @@
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
             throw new InvalidArgumentException();
         }
-        $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
+        $maskedDB = mb_substr($em, 0, -$hash->getLength() + 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {


286) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:162    [M] MBString

--- Original
+++ New
@@ @@
         if ($em[mb_strlen($em, '8bit') - 1] !== chr(0xbc)) {
             throw new InvalidArgumentException();
         }
-        $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
+        $maskedDB = substr($em, 0, -$hash->getLength() - 1);
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {


287) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:163    [M] DecrementInteger

--- Original
+++ New
@@ @@
             throw new InvalidArgumentException();
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
-        $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
+        $h = mb_substr($em, -$hash->getLength() - 0, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();


288) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:163    [M] IncrementInteger

--- Original
+++ New
@@ @@
             throw new InvalidArgumentException();
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
-        $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
+        $h = mb_substr($em, -$hash->getLength() - 2, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();


289) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:163    [M] Minus

--- Original
+++ New
@@ @@
             throw new InvalidArgumentException();
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
-        $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
+        $h = mb_substr($em, -$hash->getLength() + 1, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();


290) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:163    [M] MBString

--- Original
+++ New
@@ @@
             throw new InvalidArgumentException();
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
-        $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
+        $h = substr($em, -$hash->getLength() - 1, $hash->getLength());
         $temp = chr(0xff << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();


291) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:164    [M] DecrementInteger

--- Original
+++ New
@@ @@
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
-        $temp = chr(0xff << ($emBits & 7));
+        $temp = chr(254 << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();
         }


292) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:164    [M] IncrementInteger

--- Original
+++ New
@@ @@
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
-        $temp = chr(0xff << ($emBits & 7));
+        $temp = chr(256 << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();
         }


293) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:164    [M] DecrementInteger

--- Original
+++ New
@@ @@
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
-        $temp = chr(0xff << ($emBits & 7));
+        $temp = chr(0xff << ($emBits & 6));
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();
         }


294) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:164    [M] IncrementInteger

--- Original
+++ New
@@ @@
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
-        $temp = chr(0xff << ($emBits & 7));
+        $temp = chr(0xff << ($emBits & 8));
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();
         }


295) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:164    [M] BitwiseAnd

--- Original
+++ New
@@ @@
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
-        $temp = chr(0xff << ($emBits & 7));
+        $temp = chr(0xff << ($emBits | 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();
         }


296) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:164    [M] ShiftLeft

--- Original
+++ New
@@ @@
         }
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
-        $temp = chr(0xff << ($emBits & 7));
+        $temp = chr(0xff >> ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();
         }


297) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:165    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
-        if ((~$maskedDB[0] & $temp) !== $temp) {
+        if ((~$maskedDB[1] & $temp) !== $temp) {
             throw new InvalidArgumentException();
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);


298) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:165    [M] BitwiseNot

--- Original
+++ New
@@ @@
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
-        if ((~$maskedDB[0] & $temp) !== $temp) {
+        if (($maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);


299) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:165    [M] BitwiseAnd

--- Original
+++ New
@@ @@
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
-        if ((~$maskedDB[0] & $temp) !== $temp) {
+        if ((~$maskedDB[0] | $temp) !== $temp) {
             throw new InvalidArgumentException();
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);


300) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:165    [M] NotIdentical

--- Original
+++ New
@@ @@
         $maskedDB = mb_substr($em, 0, -$hash->getLength() - 1, '8bit');
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
-        if ((~$maskedDB[0] & $temp) !== $temp) {
+        if ((~$maskedDB[0] & $temp) === $temp) {
             throw new InvalidArgumentException();
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);


301) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:166    [M] Throw_

--- Original
+++ New
@@ @@
         $h = mb_substr($em, -$hash->getLength() - 1, $hash->getLength(), '8bit');
         $temp = chr(0xff << ($emBits & 7));
         if ((~$maskedDB[0] & $temp) !== $temp) {
-            throw new InvalidArgumentException();
+            new InvalidArgumentException();
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;


302) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:168    [M] Minus

--- Original
+++ New
@@ @@
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();
         }
-        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
+        $dbMask = $this->getMGF1($h, $emLen + $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;


303) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:168    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();
         }
-        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
+        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 0, $hash);
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;


304) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:168    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();
         }
-        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
+        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 2, $hash);
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;


305) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:168    [M] Minus

--- Original
+++ New
@@ @@
         if ((~$maskedDB[0] & $temp) !== $temp) {
             throw new InvalidArgumentException();
         }
-        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
+        $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() + 1, $hash);
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;


306) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:169    [M] BitwiseXor

--- Original
+++ New
@@ @@
             throw new InvalidArgumentException();
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
-        $db = $maskedDB ^ $dbMask;
+        $db = $maskedDB & $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {


307) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:170    [M] IncrementInteger

--- Original
+++ New
@@ @@
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
-        $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
+        $db[1] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();


308) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:170    [M] DecrementInteger

--- Original
+++ New
@@ @@
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
-        $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
+        $db[0] = ~chr(254 << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();


309) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:170    [M] IncrementInteger

--- Original
+++ New
@@ @@
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
-        $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
+        $db[0] = ~chr(256 << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();


310) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:170    [M] DecrementInteger

--- Original
+++ New
@@ @@
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
-        $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
+        $db[0] = ~chr(0xff << ($emBits & 6)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();


311) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:170    [M] IncrementInteger

--- Original
+++ New
@@ @@
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
-        $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
+        $db[0] = ~chr(0xff << ($emBits & 8)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();


312) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:170    [M] BitwiseAnd

--- Original
+++ New
@@ @@
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
-        $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
+        $db[0] = ~chr(0xff << ($emBits | 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();


313) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:170    [M] ShiftLeft

--- Original
+++ New
@@ @@
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
-        $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
+        $db[0] = ~chr(0xff >> ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();


314) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:170    [M] BitwiseNot

--- Original
+++ New
@@ @@
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
-        $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
+        $db[0] = chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();


315) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:170    [M] IncrementInteger

--- Original
+++ New
@@ @@
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
-        $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
+        $db[0] = ~chr(0xff << ($emBits & 7)) & $db[1];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();


316) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:170    [M] BitwiseAnd

--- Original
+++ New
@@ @@
         }
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
-        $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
+        $db[0] = ~chr(0xff << ($emBits & 7)) | $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();


317) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:171    [M] Minus

--- Original
+++ New
@@ @@
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
-        $temp = $emLen - $hash->getLength() - $sLen - 2;
+        $temp = $emLen + $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();
         }


318) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:171    [M] Minus

--- Original
+++ New
@@ @@
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
-        $temp = $emLen - $hash->getLength() - $sLen - 2;
+        $temp = $emLen - $hash->getLength() + $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();
         }


319) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:171    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
-        $temp = $emLen - $hash->getLength() - $sLen - 2;
+        $temp = $emLen - $hash->getLength() - $sLen - 1;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();
         }


320) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:171    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
-        $temp = $emLen - $hash->getLength() - $sLen - 2;
+        $temp = $emLen - $hash->getLength() - $sLen - 3;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();
         }


321) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:171    [M] Minus

--- Original
+++ New
@@ @@
         $dbMask = $this->getMGF1($h, $emLen - $hash->getLength() - 1, $hash);
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
-        $temp = $emLen - $hash->getLength() - $sLen - 2;
+        $temp = $emLen - $hash->getLength() - $sLen + 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();
         }


322) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:172    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
-        if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
+        if (mb_strpos($db, str_repeat(chr(-1), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();
         }
         if (ord($db[$temp]) !== 1) {


323) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:172    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
-        if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
+        if (mb_strpos($db, str_repeat(chr(1), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();
         }
         if (ord($db[$temp]) !== 1) {


324) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:172    [M] UnwrapStrRepeat

--- Original
+++ New
@@ @@
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
-        if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
+        if (mb_strpos($db, chr(0), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();
         }
         if (ord($db[$temp]) !== 1) {


325) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:172    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
-        if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
+        if (mb_strpos($db, str_repeat(chr(0), $temp), -1, '8bit') !== 0) {
             throw new InvalidArgumentException();
         }
         if (ord($db[$temp]) !== 1) {


326) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:172    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
-        if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
+        if (mb_strpos($db, str_repeat(chr(0), $temp), 1, '8bit') !== 0) {
             throw new InvalidArgumentException();
         }
         if (ord($db[$temp]) !== 1) {


327) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:172    [M] MBString

--- Original
+++ New
@@ @@
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
-        if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
+        if (strpos($db, str_repeat(chr(0), $temp), 0) !== 0) {
             throw new InvalidArgumentException();
         }
         if (ord($db[$temp]) !== 1) {


328) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:172    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
-        if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
+        if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== -1) {
             throw new InvalidArgumentException();
         }
         if (ord($db[$temp]) !== 1) {


329) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:172    [M] NotIdentical

--- Original
+++ New
@@ @@
         $db = $maskedDB ^ $dbMask;
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
-        if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
+        if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') === 0) {
             throw new InvalidArgumentException();
         }
         if (ord($db[$temp]) !== 1) {


330) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:173    [M] Throw_

--- Original
+++ New
@@ @@
         $db[0] = ~chr(0xff << ($emBits & 7)) & $db[0];
         $temp = $emLen - $hash->getLength() - $sLen - 2;
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
-            throw new InvalidArgumentException();
+            new InvalidArgumentException();
         }
         if (ord($db[$temp]) !== 1) {
             throw new InvalidArgumentException();


331) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:175    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();
         }
-        if (ord($db[$temp]) !== 1) {
+        if (ord($db[$temp]) !== 2) {
             throw new InvalidArgumentException();
         }
         $salt = mb_substr($db, $temp + 1, null, '8bit');


332) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:175    [M] NotIdentical

--- Original
+++ New
@@ @@
         if (mb_strpos($db, str_repeat(chr(0), $temp), 0, '8bit') !== 0) {
             throw new InvalidArgumentException();
         }
-        if (ord($db[$temp]) !== 1) {
+        if (ord($db[$temp]) === 1) {
             throw new InvalidArgumentException();
         }
         $salt = mb_substr($db, $temp + 1, null, '8bit');


333) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:176    [M] Throw_

--- Original
+++ New
@@ @@
             throw new InvalidArgumentException();
         }
         if (ord($db[$temp]) !== 1) {
-            throw new InvalidArgumentException();
+            new InvalidArgumentException();
         }
         $salt = mb_substr($db, $temp + 1, null, '8bit');
         // should be $sLen long


334) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:178    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if (ord($db[$temp]) !== 1) {
             throw new InvalidArgumentException();
         }
-        $salt = mb_substr($db, $temp + 1, null, '8bit');
+        $salt = mb_substr($db, $temp + 0, null, '8bit');
         // should be $sLen long
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h2 = $hash->hash($m2);


335) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:178    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if (ord($db[$temp]) !== 1) {
             throw new InvalidArgumentException();
         }
-        $salt = mb_substr($db, $temp + 1, null, '8bit');
+        $salt = mb_substr($db, $temp + 2, null, '8bit');
         // should be $sLen long
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h2 = $hash->hash($m2);


336) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:178    [M] Plus

--- Original
+++ New
@@ @@
         if (ord($db[$temp]) !== 1) {
             throw new InvalidArgumentException();
         }
-        $salt = mb_substr($db, $temp + 1, null, '8bit');
+        $salt = mb_substr($db, $temp - 1, null, '8bit');
         // should be $sLen long
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h2 = $hash->hash($m2);


337) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:178    [M] MBString

--- Original
+++ New
@@ @@
         if (ord($db[$temp]) !== 1) {
             throw new InvalidArgumentException();
         }
-        $salt = mb_substr($db, $temp + 1, null, '8bit');
+        $salt = substr($db, $temp + 1, null);
         // should be $sLen long
         $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
         $h2 = $hash->hash($m2);


338) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:179    [M] Concat

--- Original
+++ New
@@ @@
         }
         $salt = mb_substr($db, $temp + 1, null, '8bit');
         // should be $sLen long
-        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
+        $m2 = $mHash . "\x00\x00\x00\x00\x00\x00\x00\x00" . $salt;
         $h2 = $hash->hash($m2);
         return hash_equals($h, $h2);
     }
 }


339) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:179    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         }
         $salt = mb_substr($db, $temp + 1, null, '8bit');
         // should be $sLen long
-        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
+        $m2 = $mHash . $salt;
         $h2 = $hash->hash($m2);
         return hash_equals($h, $h2);
     }
 }


340) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:179    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         }
         $salt = mb_substr($db, $temp + 1, null, '8bit');
         // should be $sLen long
-        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
+        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $salt;
         $h2 = $hash->hash($m2);
         return hash_equals($h, $h2);
     }
 }


341) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:179    [M] Concat

--- Original
+++ New
@@ @@
         }
         $salt = mb_substr($db, $temp + 1, null, '8bit');
         // should be $sLen long
-        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
+        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $salt . $mHash;
         $h2 = $hash->hash($m2);
         return hash_equals($h, $h2);
     }
 }


342) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php:179    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         }
         $salt = mb_substr($db, $temp + 1, null, '8bit');
         // should be $sLen long
-        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash . $salt;
+        $m2 = "\x00\x00\x00\x00\x00\x00\x00\x00" . $mHash;
         $h2 = $hash->hash($m2);
         return hash_equals($h, $h2);
     }
 }


343) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/RS1.php:13    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class RS1 extends RSA
 {
     public const ID = -65535;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


344) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/RS256.php:13    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class RS256 extends RSA
 {
     public const ID = -257;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


345) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/RS384.php:13    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class RS384 extends RSA
 {
     public const ID = -258;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


346) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/RS512.php:13    [M] PublicVisibility

--- Original
+++ New
@@ @@
 final class RS512 extends RSA
 {
     public const ID = -259;
-    public static function create() : self
+    protected static function create() : self
     {
         return new self();
     }


347) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/RSA.php:21    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function sign(string $data, Key $key) : string
     {
         $key = $this->handleKey($key);
-        Assertion::true($key->isPrivate(), 'The key is not private');
+        
         try {
             openssl_sign($data, $signature, $key->asPem(), $this->getHashAlgorithm());
         } catch (Throwable $e) {


348) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/RSA.php:24    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         $key = $this->handleKey($key);
         Assertion::true($key->isPrivate(), 'The key is not private');
         try {
-            openssl_sign($data, $signature, $key->asPem(), $this->getHashAlgorithm());
+            
         } catch (Throwable $e) {
             throw new InvalidArgumentException('Unable to sign the data', 0, $e);
         }


349) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/RSA.php:26    [M] DecrementInteger

--- Original
+++ New
@@ @@
         try {
             openssl_sign($data, $signature, $key->asPem(), $this->getHashAlgorithm());
         } catch (Throwable $e) {
-            throw new InvalidArgumentException('Unable to sign the data', 0, $e);
+            throw new InvalidArgumentException('Unable to sign the data', -1, $e);
         }
         return $signature;
     }


350) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/RSA.php:26    [M] IncrementInteger

--- Original
+++ New
@@ @@
         try {
             openssl_sign($data, $signature, $key->asPem(), $this->getHashAlgorithm());
         } catch (Throwable $e) {
-            throw new InvalidArgumentException('Unable to sign the data', 0, $e);
+            throw new InvalidArgumentException('Unable to sign the data', 1, $e);
         }
         return $signature;
     }


351) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/RSA.php:26    [M] Throw_

--- Original
+++ New
@@ @@
         try {
             openssl_sign($data, $signature, $key->asPem(), $this->getHashAlgorithm());
         } catch (Throwable $e) {
-            throw new InvalidArgumentException('Unable to sign the data', 0, $e);
+            new InvalidArgumentException('Unable to sign the data', 0, $e);
         }
         return $signature;
     }


352) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/RSA.php:36    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function verify(string $data, Key $key, string $signature) : bool
     {
         $key = $this->handleKey($key);
-        return openssl_verify($data, $signature, $key->asPem(), $this->getHashAlgorithm()) === 1;
+        return openssl_verify($data, $signature, $key->asPem(), $this->getHashAlgorithm()) === 2;
     }
     protected abstract function getHashAlgorithm() : int;
     private function handleKey(Key $key) : RsaKey


353) /home/florent/PhpstormProjects/cose-lib/src/Algorithm/Signature/RSA/RSA.php:36    [M] Identical

--- Original
+++ New
@@ @@
     public function verify(string $data, Key $key, string $signature) : bool
     {
         $key = $this->handleKey($key);
-        return openssl_verify($data, $signature, $key->asPem(), $this->getHashAlgorithm()) === 1;
+        return openssl_verify($data, $signature, $key->asPem(), $this->getHashAlgorithm()) !== 1;
     }
     protected abstract function getHashAlgorithm() : int;
     private function handleKey(Key $key) : RsaKey


354) /home/florent/PhpstormProjects/cose-lib/src/Algorithms.php:152    [M] PublicVisibility

--- Original
+++ New
@@ @@
     public final const COSE_ALGORITHM_RS1 = -65535;
     public final const COSE_ALGORITHM_MAP = [self::COSE_ALGORITHM_ES256 => OPENSSL_ALGO_SHA256, self::COSE_ALGORITHM_ES384 => OPENSSL_ALGO_SHA384, self::COSE_ALGORITHM_ES512 => OPENSSL_ALGO_SHA512, self::COSE_ALGORITHM_RS256 => OPENSSL_ALGO_SHA256, self::COSE_ALGORITHM_RS384 => OPENSSL_ALGO_SHA384, self::COSE_ALGORITHM_RS512 => OPENSSL_ALGO_SHA512, self::COSE_ALGORITHM_RS1 => OPENSSL_ALGO_SHA1];
     public final const COSE_HASH_MAP = [self::COSE_ALGORITHM_ES256K => 'sha256', self::COSE_ALGORITHM_ES256 => 'sha256', self::COSE_ALGORITHM_ES384 => 'sha384', self::COSE_ALGORITHM_ES512 => 'sha512', self::COSE_ALGORITHM_RS256 => 'sha256', self::COSE_ALGORITHM_RS384 => 'sha384', self::COSE_ALGORITHM_RS512 => 'sha512', self::COSE_ALGORITHM_PS256 => 'sha256', self::COSE_ALGORITHM_PS384 => 'sha384', self::COSE_ALGORITHM_PS512 => 'sha512', self::COSE_ALGORITHM_RS1 => 'sha1'];
-    public static function getOpensslAlgorithmFor(int $algorithmIdentifier) : int
+    protected static function getOpensslAlgorithmFor(int $algorithmIdentifier) : int
     {
         Assertion::keyExists(self::COSE_ALGORITHM_MAP, $algorithmIdentifier, 'The specified algorithm identifier is not supported');
         return self::COSE_ALGORITHM_MAP[$algorithmIdentifier];


355) /home/florent/PhpstormProjects/cose-lib/src/Algorithms.php:154    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public final const COSE_HASH_MAP = [self::COSE_ALGORITHM_ES256K => 'sha256', self::COSE_ALGORITHM_ES256 => 'sha256', self::COSE_ALGORITHM_ES384 => 'sha384', self::COSE_ALGORITHM_ES512 => 'sha512', self::COSE_ALGORITHM_RS256 => 'sha256', self::COSE_ALGORITHM_RS384 => 'sha384', self::COSE_ALGORITHM_RS512 => 'sha512', self::COSE_ALGORITHM_PS256 => 'sha256', self::COSE_ALGORITHM_PS384 => 'sha384', self::COSE_ALGORITHM_PS512 => 'sha512', self::COSE_ALGORITHM_RS1 => 'sha1'];
     public static function getOpensslAlgorithmFor(int $algorithmIdentifier) : int
     {
-        Assertion::keyExists(self::COSE_ALGORITHM_MAP, $algorithmIdentifier, 'The specified algorithm identifier is not supported');
+        
         return self::COSE_ALGORITHM_MAP[$algorithmIdentifier];
     }
     public static function getHashAlgorithmFor(int $algorithmIdentifier) : string


356) /home/florent/PhpstormProjects/cose-lib/src/Algorithms.php:163    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Assertion::keyExists(self::COSE_ALGORITHM_MAP, $algorithmIdentifier, 'The specified algorithm identifier is not supported');
         return self::COSE_ALGORITHM_MAP[$algorithmIdentifier];
     }
-    public static function getHashAlgorithmFor(int $algorithmIdentifier) : string
+    protected static function getHashAlgorithmFor(int $algorithmIdentifier) : string
     {
         Assertion::keyExists(self::COSE_HASH_MAP, $algorithmIdentifier, 'The specified algorithm identifier is not supported');
         return self::COSE_HASH_MAP[$algorithmIdentifier];
     }
 }


357) /home/florent/PhpstormProjects/cose-lib/src/Algorithms.php:165    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public static function getHashAlgorithmFor(int $algorithmIdentifier) : string
     {
-        Assertion::keyExists(self::COSE_HASH_MAP, $algorithmIdentifier, 'The specified algorithm identifier is not supported');
+        
         return self::COSE_HASH_MAP[$algorithmIdentifier];
     }
 }


358) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:22    [M] PublicVisibility

--- Original
+++ New
@@ @@
     private function __construct(private readonly BrickBigInteger $value)
     {
     }
-    public static function createFromBinaryString(string $value) : self
+    protected static function createFromBinaryString(string $value) : self
     {
         $res = unpack('H*', $value);
         $data = current($res);


359) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:27    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $res = unpack('H*', $value);
         $data = current($res);
-        return new self(BrickBigInteger::fromBase($data, 16));
+        return new self(BrickBigInteger::fromBase($data, 15));
     }
     public static function createFromDecimal(int $value) : self
     {


360) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:27    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         $res = unpack('H*', $value);
         $data = current($res);
-        return new self(BrickBigInteger::fromBase($data, 16));
+        return new self(BrickBigInteger::fromBase($data, 17));
     }
     public static function createFromDecimal(int $value) : self
     {


361) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:30    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $data = current($res);
         return new self(BrickBigInteger::fromBase($data, 16));
     }
-    public static function createFromDecimal(int $value) : self
+    protected static function createFromDecimal(int $value) : self
     {
         return new self(BrickBigInteger::of($value));
     }


362) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Converts a BigInteger to a binary string.
      */
-    public function toBytes() : string
+    protected function toBytes() : string
     {
         if ($this->value->isEqualTo(BrickBigInteger::zero())) {
             return '';


363) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:44    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if ($this->value->isEqualTo(BrickBigInteger::zero())) {
             return '';
         }
-        $temp = $this->value->toBase(16);
+        $temp = $this->value->toBase(15);
         $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
         $temp = hex2bin($temp);
         return ltrim($temp, chr(0));


364) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:44    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if ($this->value->isEqualTo(BrickBigInteger::zero())) {
             return '';
         }
-        $temp = $this->value->toBase(16);
+        $temp = $this->value->toBase(17);
         $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
         $temp = hex2bin($temp);
         return ltrim($temp, chr(0));


365) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:45    [M] DecrementInteger

--- Original
+++ New
@@ @@
             return '';
         }
         $temp = $this->value->toBase(16);
-        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
+        $temp = -1 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
         $temp = hex2bin($temp);
         return ltrim($temp, chr(0));
     }


366) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:45    [M] MBString

--- Original
+++ New
@@ @@
             return '';
         }
         $temp = $this->value->toBase(16);
-        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
+        $temp = 0 !== (strlen($temp) & 1) ? '0' . $temp : $temp;
         $temp = hex2bin($temp);
         return ltrim($temp, chr(0));
     }


367) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:45    [M] DecrementInteger

--- Original
+++ New
@@ @@
             return '';
         }
         $temp = $this->value->toBase(16);
-        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
+        $temp = 0 !== (mb_strlen($temp, '8bit') & 0) ? '0' . $temp : $temp;
         $temp = hex2bin($temp);
         return ltrim($temp, chr(0));
     }


368) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:45    [M] IncrementInteger

--- Original
+++ New
@@ @@
             return '';
         }
         $temp = $this->value->toBase(16);
-        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
+        $temp = 0 !== (mb_strlen($temp, '8bit') & 2) ? '0' . $temp : $temp;
         $temp = hex2bin($temp);
         return ltrim($temp, chr(0));
     }


369) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:45    [M] BitwiseAnd

--- Original
+++ New
@@ @@
             return '';
         }
         $temp = $this->value->toBase(16);
-        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
+        $temp = 0 !== (mb_strlen($temp, '8bit') | 1) ? '0' . $temp : $temp;
         $temp = hex2bin($temp);
         return ltrim($temp, chr(0));
     }


370) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:45    [M] NotIdentical

--- Original
+++ New
@@ @@
             return '';
         }
         $temp = $this->value->toBase(16);
-        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
+        $temp = 0 === (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
         $temp = hex2bin($temp);
         return ltrim($temp, chr(0));
     }


371) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:45    [M] Concat

--- Original
+++ New
@@ @@
             return '';
         }
         $temp = $this->value->toBase(16);
-        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
+        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? $temp . '0' : $temp;
         $temp = hex2bin($temp);
         return ltrim($temp, chr(0));
     }


372) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:45    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
             return '';
         }
         $temp = $this->value->toBase(16);
-        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
+        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? $temp : $temp;
         $temp = hex2bin($temp);
         return ltrim($temp, chr(0));
     }


373) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:45    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
             return '';
         }
         $temp = $this->value->toBase(16);
-        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
+        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' : $temp;
         $temp = hex2bin($temp);
         return ltrim($temp, chr(0));
     }


374) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:45    [M] Ternary

--- Original
+++ New
@@ @@
             return '';
         }
         $temp = $this->value->toBase(16);
-        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
+        $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? $temp : '0' . $temp;
         $temp = hex2bin($temp);
         return ltrim($temp, chr(0));
     }


375) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:48    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $temp = $this->value->toBase(16);
         $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
         $temp = hex2bin($temp);
-        return ltrim($temp, chr(0));
+        return ltrim($temp, chr(-1));
     }
     /**
      * Adds two BigIntegers.


376) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:48    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $temp = $this->value->toBase(16);
         $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
         $temp = hex2bin($temp);
-        return ltrim($temp, chr(0));
+        return ltrim($temp, chr(1));
     }
     /**
      * Adds two BigIntegers.


377) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:48    [M] UnwrapLtrim

--- Original
+++ New
@@ @@
         $temp = $this->value->toBase(16);
         $temp = 0 !== (mb_strlen($temp, '8bit') & 1) ? '0' . $temp : $temp;
         $temp = hex2bin($temp);
-        return ltrim($temp, chr(0));
+        return $temp;
     }
     /**
      * Adds two BigIntegers.


378) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:54    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Adds two BigIntegers.
      */
-    public function add(self $y) : self
+    protected function add(self $y) : self
     {
         $value = $this->value->plus($y->value);
         return new self($value);


379) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:64    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Subtracts two BigIntegers.
      */
-    public function subtract(self $y) : self
+    protected function subtract(self $y) : self
     {
         $value = $this->value->minus($y->value);
         return new self($value);


380) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:74    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Multiplies two BigIntegers.
      */
-    public function multiply(self $x) : self
+    protected function multiply(self $x) : self
     {
         $value = $this->value->multipliedBy($x->value);
         return new self($value);


381) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:84    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Performs modular exponentiation.
      */
-    public function modPow(self $e, self $n) : self
+    protected function modPow(self $e, self $n) : self
     {
         $value = $this->value->modPow($e->value, $n->value);
         return new self($value);


382) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:94    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Performs modular exponentiation.
      */
-    public function mod(self $d) : self
+    protected function mod(self $d) : self
     {
         $value = $this->value->mod($d->value);
         return new self($value);


383) /home/florent/PhpstormProjects/cose-lib/src/BigInteger.php:104    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Compares two numbers.
      */
-    public function compare(self $y) : int
+    protected function compare(self $y) : int
     {
         return $this->value->compareTo($y->value);
     }
 }


384) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:19    [M] PublicVisibility

--- Original
+++ New
@@ @@
     private function __construct(private readonly string $hash, private readonly int $length, private readonly string $t)
     {
     }
-    public static function sha1() : self
+    protected static function sha1() : self
     {
         return new self('sha1', 20, "0!0\t\x06\x05+\x0e\x03\x02\x1a\x05\x00\x04\x14");
     }


385) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:21    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public static function sha1() : self
     {
-        return new self('sha1', 20, "0!0\t\x06\x05+\x0e\x03\x02\x1a\x05\x00\x04\x14");
+        return new self('sha1', 19, "0!0\t\x06\x05+\x0e\x03\x02\x1a\x05\x00\x04\x14");
     }
     public static function sha256() : self
     {


386) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:21    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public static function sha1() : self
     {
-        return new self('sha1', 20, "0!0\t\x06\x05+\x0e\x03\x02\x1a\x05\x00\x04\x14");
+        return new self('sha1', 21, "0!0\t\x06\x05+\x0e\x03\x02\x1a\x05\x00\x04\x14");
     }
     public static function sha256() : self
     {


387) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return new self('sha1', 20, "0!0\t\x06\x05+\x0e\x03\x02\x1a\x05\x00\x04\x14");
     }
-    public static function sha256() : self
+    protected static function sha256() : self
     {
         return new self('sha256', 32, "010\r\x06\t`\x86H\x01e\x03\x04\x02\x01\x05\x00\x04 ");
     }


388) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:26    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public static function sha256() : self
     {
-        return new self('sha256', 32, "010\r\x06\t`\x86H\x01e\x03\x04\x02\x01\x05\x00\x04 ");
+        return new self('sha256', 31, "010\r\x06\t`\x86H\x01e\x03\x04\x02\x01\x05\x00\x04 ");
     }
     public static function sha384() : self
     {


389) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:26    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public static function sha256() : self
     {
-        return new self('sha256', 32, "010\r\x06\t`\x86H\x01e\x03\x04\x02\x01\x05\x00\x04 ");
+        return new self('sha256', 33, "010\r\x06\t`\x86H\x01e\x03\x04\x02\x01\x05\x00\x04 ");
     }
     public static function sha384() : self
     {


390) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return new self('sha256', 32, "010\r\x06\t`\x86H\x01e\x03\x04\x02\x01\x05\x00\x04 ");
     }
-    public static function sha384() : self
+    protected static function sha384() : self
     {
         return new self('sha384', 48, "0A0\r\x06\t`\x86H\x01e\x03\x04\x02\x02\x05\x00\x040");
     }


391) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:31    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public static function sha384() : self
     {
-        return new self('sha384', 48, "0A0\r\x06\t`\x86H\x01e\x03\x04\x02\x02\x05\x00\x040");
+        return new self('sha384', 47, "0A0\r\x06\t`\x86H\x01e\x03\x04\x02\x02\x05\x00\x040");
     }
     public static function sha512() : self
     {


392) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:31    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public static function sha384() : self
     {
-        return new self('sha384', 48, "0A0\r\x06\t`\x86H\x01e\x03\x04\x02\x02\x05\x00\x040");
+        return new self('sha384', 49, "0A0\r\x06\t`\x86H\x01e\x03\x04\x02\x02\x05\x00\x040");
     }
     public static function sha512() : self
     {


393) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:34    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return new self('sha384', 48, "0A0\r\x06\t`\x86H\x01e\x03\x04\x02\x02\x05\x00\x040");
     }
-    public static function sha512() : self
+    protected static function sha512() : self
     {
         return new self('sha512', 64, "0Q0\r\x06\t`\x86H\x01e\x03\x04\x02\x03\x05\x00\x04@");
     }


394) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:36    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public static function sha512() : self
     {
-        return new self('sha512', 64, "0Q0\r\x06\t`\x86H\x01e\x03\x04\x02\x03\x05\x00\x04@");
+        return new self('sha512', 63, "0Q0\r\x06\t`\x86H\x01e\x03\x04\x02\x03\x05\x00\x04@");
     }
     public function getLength() : int
     {


395) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:36    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public static function sha512() : self
     {
-        return new self('sha512', 64, "0Q0\r\x06\t`\x86H\x01e\x03\x04\x02\x03\x05\x00\x04@");
+        return new self('sha512', 65, "0Q0\r\x06\t`\x86H\x01e\x03\x04\x02\x03\x05\x00\x04@");
     }
     public function getLength() : int
     {


396) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:39    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return new self('sha512', 64, "0Q0\r\x06\t`\x86H\x01e\x03\x04\x02\x03\x05\x00\x04@");
     }
-    public function getLength() : int
+    protected function getLength() : int
     {
         return $this->length;
     }


397) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:47    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Compute the HMAC.
      */
-    public function hash(string $text) : string
+    protected function hash(string $text) : string
     {
         return hash($this->hash, $text, true);
     }


398) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:52    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return hash($this->hash, $text, true);
     }
-    public function name() : string
+    protected function name() : string
     {
         return $this->hash;
     }


399) /home/florent/PhpstormProjects/cose-lib/src/Hash.php:57    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hash;
     }
-    public function t() : string
+    protected function t() : string
     {
         return $this->t;
     }
 }


400) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:59    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function __construct(array $data)
     {
-        parent::__construct($data);
+        
         Assertion::eq($data[self::TYPE], self::TYPE_EC2, 'Invalid EC2 key. The key type does not correspond to an EC2 key');
         Assertion::keyExists($data, self::DATA_CURVE, 'Invalid EC2 key. The curve is missing');
         Assertion::keyExists($data, self::DATA_X, 'Invalid EC2 key. The x coordinate is missing');


401) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:60    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function __construct(array $data)
     {
         parent::__construct($data);
-        Assertion::eq($data[self::TYPE], self::TYPE_EC2, 'Invalid EC2 key. The key type does not correspond to an EC2 key');
+        
         Assertion::keyExists($data, self::DATA_CURVE, 'Invalid EC2 key. The curve is missing');
         Assertion::keyExists($data, self::DATA_X, 'Invalid EC2 key. The x coordinate is missing');
         Assertion::keyExists($data, self::DATA_Y, 'Invalid EC2 key. The y coordinate is missing');


402) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:65    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         parent::__construct($data);
         Assertion::eq($data[self::TYPE], self::TYPE_EC2, 'Invalid EC2 key. The key type does not correspond to an EC2 key');
-        Assertion::keyExists($data, self::DATA_CURVE, 'Invalid EC2 key. The curve is missing');
+        
         Assertion::keyExists($data, self::DATA_X, 'Invalid EC2 key. The x coordinate is missing');
         Assertion::keyExists($data, self::DATA_Y, 'Invalid EC2 key. The y coordinate is missing');
         Assertion::length($data[self::DATA_X], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for x coordinate', null, '8bit');


403) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:66    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         parent::__construct($data);
         Assertion::eq($data[self::TYPE], self::TYPE_EC2, 'Invalid EC2 key. The key type does not correspond to an EC2 key');
         Assertion::keyExists($data, self::DATA_CURVE, 'Invalid EC2 key. The curve is missing');
-        Assertion::keyExists($data, self::DATA_X, 'Invalid EC2 key. The x coordinate is missing');
+        
         Assertion::keyExists($data, self::DATA_Y, 'Invalid EC2 key. The y coordinate is missing');
         Assertion::length($data[self::DATA_X], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for x coordinate', null, '8bit');
         Assertion::length($data[self::DATA_Y], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for y coordinate', null, '8bit');


404) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:67    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Assertion::eq($data[self::TYPE], self::TYPE_EC2, 'Invalid EC2 key. The key type does not correspond to an EC2 key');
         Assertion::keyExists($data, self::DATA_CURVE, 'Invalid EC2 key. The curve is missing');
         Assertion::keyExists($data, self::DATA_X, 'Invalid EC2 key. The x coordinate is missing');
-        Assertion::keyExists($data, self::DATA_Y, 'Invalid EC2 key. The y coordinate is missing');
+        
         Assertion::length($data[self::DATA_X], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for x coordinate', null, '8bit');
         Assertion::length($data[self::DATA_Y], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for y coordinate', null, '8bit');
         Assertion::inArray((int) $data[self::DATA_CURVE], self::SUPPORTED_CURVES, 'The curve is not supported');


405) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:68    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Assertion::keyExists($data, self::DATA_CURVE, 'Invalid EC2 key. The curve is missing');
         Assertion::keyExists($data, self::DATA_X, 'Invalid EC2 key. The x coordinate is missing');
         Assertion::keyExists($data, self::DATA_Y, 'Invalid EC2 key. The y coordinate is missing');
-        Assertion::length($data[self::DATA_X], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for x coordinate', null, '8bit');
+        
         Assertion::length($data[self::DATA_Y], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for y coordinate', null, '8bit');
         Assertion::inArray((int) $data[self::DATA_CURVE], self::SUPPORTED_CURVES, 'The curve is not supported');
     }


406) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:75    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Assertion::keyExists($data, self::DATA_X, 'Invalid EC2 key. The x coordinate is missing');
         Assertion::keyExists($data, self::DATA_Y, 'Invalid EC2 key. The y coordinate is missing');
         Assertion::length($data[self::DATA_X], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for x coordinate', null, '8bit');
-        Assertion::length($data[self::DATA_Y], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for y coordinate', null, '8bit');
+        
         Assertion::inArray((int) $data[self::DATA_CURVE], self::SUPPORTED_CURVES, 'The curve is not supported');
     }
     /**


407) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:82    [M] CastInt

--- Original
+++ New
@@ @@
         Assertion::keyExists($data, self::DATA_Y, 'Invalid EC2 key. The y coordinate is missing');
         Assertion::length($data[self::DATA_X], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for x coordinate', null, '8bit');
         Assertion::length($data[self::DATA_Y], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for y coordinate', null, '8bit');
-        Assertion::inArray((int) $data[self::DATA_CURVE], self::SUPPORTED_CURVES, 'The curve is not supported');
+        Assertion::inArray($data[self::DATA_CURVE], self::SUPPORTED_CURVES, 'The curve is not supported');
     }
     /**
      * @param array<int|string, mixed> $data


408) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:82    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Assertion::keyExists($data, self::DATA_Y, 'Invalid EC2 key. The y coordinate is missing');
         Assertion::length($data[self::DATA_X], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for x coordinate', null, '8bit');
         Assertion::length($data[self::DATA_Y], self::CURVE_KEY_LENGTH[$data[self::DATA_CURVE]], 'Invalid length for y coordinate', null, '8bit');
-        Assertion::inArray((int) $data[self::DATA_CURVE], self::SUPPORTED_CURVES, 'The curve is not supported');
+        
     }
     /**
      * @param array<int|string, mixed> $data


409) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:93    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return new self($data);
     }
-    public function toPublic() : self
+    protected function toPublic() : self
     {
         $data = $this->getData();
         unset($data[self::DATA_D]);


410) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:101    [M] PublicVisibility

--- Original
+++ New
@@ @@
         unset($data[self::DATA_D]);
         return new self($data);
     }
-    public function x() : string
+    protected function x() : string
     {
         return $this->get(self::DATA_X);
     }


411) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:106    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->get(self::DATA_X);
     }
-    public function y() : string
+    protected function y() : string
     {
         return $this->get(self::DATA_Y);
     }


412) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:111    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->get(self::DATA_Y);
     }
-    public function isPrivate() : bool
+    protected function isPrivate() : bool
     {
         return array_key_exists(self::DATA_D, $this->getData());
     }


413) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:116    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return array_key_exists(self::DATA_D, $this->getData());
     }
-    public function d() : string
+    protected function d() : string
     {
         Assertion::true($this->isPrivate(), 'The key is not private');
         return $this->get(self::DATA_D);


414) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:118    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function d() : string
     {
-        Assertion::true($this->isPrivate(), 'The key is not private');
+        
         return $this->get(self::DATA_D);
     }
     public function curve() : int


415) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:123    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Assertion::true($this->isPrivate(), 'The key is not private');
         return $this->get(self::DATA_D);
     }
-    public function curve() : int
+    protected function curve() : int
     {
         return (int) $this->get(self::DATA_CURVE);
     }


416) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:125    [M] CastInt

--- Original
+++ New
@@ @@
     }
     public function curve() : int
     {
-        return (int) $this->get(self::DATA_CURVE);
+        return $this->get(self::DATA_CURVE);
     }
     public function asPEM() : string
     {


417) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:128    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return (int) $this->get(self::DATA_CURVE);
     }
-    public function asPEM() : string
+    protected function asPEM() : string
     {
         if ($this->isPrivate()) {
             $der = new Sequence(new Integer(1), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(0, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(1, new BitString(bin2hex($this->getUncompressedCoordinates()))));


418) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:132    [M] DecrementInteger

--- Original
+++ New
@@ @@
     public function asPEM() : string
     {
         if ($this->isPrivate()) {
-            $der = new Sequence(new Integer(1), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(0, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(1, new BitString(bin2hex($this->getUncompressedCoordinates()))));
+            $der = new Sequence(new Integer(0), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(0, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(1, new BitString(bin2hex($this->getUncompressedCoordinates()))));
             return $this->pem('EC PRIVATE KEY', $der->getBinary());
         }
         $der = new Sequence(new Sequence(new ObjectIdentifier('1.2.840.10045.2.1'), new ObjectIdentifier($this->getCurveOid())), new BitString(bin2hex($this->getUncompressedCoordinates())));


419) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:132    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function asPEM() : string
     {
         if ($this->isPrivate()) {
-            $der = new Sequence(new Integer(1), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(0, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(1, new BitString(bin2hex($this->getUncompressedCoordinates()))));
+            $der = new Sequence(new Integer(2), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(0, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(1, new BitString(bin2hex($this->getUncompressedCoordinates()))));
             return $this->pem('EC PRIVATE KEY', $der->getBinary());
         }
         $der = new Sequence(new Sequence(new ObjectIdentifier('1.2.840.10045.2.1'), new ObjectIdentifier($this->getCurveOid())), new BitString(bin2hex($this->getUncompressedCoordinates())));


420) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:134    [M] DecrementInteger

--- Original
+++ New
@@ @@
     public function asPEM() : string
     {
         if ($this->isPrivate()) {
-            $der = new Sequence(new Integer(1), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(0, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(1, new BitString(bin2hex($this->getUncompressedCoordinates()))));
+            $der = new Sequence(new Integer(1), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(-1, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(1, new BitString(bin2hex($this->getUncompressedCoordinates()))));
             return $this->pem('EC PRIVATE KEY', $der->getBinary());
         }
         $der = new Sequence(new Sequence(new ObjectIdentifier('1.2.840.10045.2.1'), new ObjectIdentifier($this->getCurveOid())), new BitString(bin2hex($this->getUncompressedCoordinates())));


421) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:134    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function asPEM() : string
     {
         if ($this->isPrivate()) {
-            $der = new Sequence(new Integer(1), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(0, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(1, new BitString(bin2hex($this->getUncompressedCoordinates()))));
+            $der = new Sequence(new Integer(1), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(1, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(1, new BitString(bin2hex($this->getUncompressedCoordinates()))));
             return $this->pem('EC PRIVATE KEY', $der->getBinary());
         }
         $der = new Sequence(new Sequence(new ObjectIdentifier('1.2.840.10045.2.1'), new ObjectIdentifier($this->getCurveOid())), new BitString(bin2hex($this->getUncompressedCoordinates())));


422) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:135    [M] DecrementInteger

--- Original
+++ New
@@ @@
     public function asPEM() : string
     {
         if ($this->isPrivate()) {
-            $der = new Sequence(new Integer(1), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(0, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(1, new BitString(bin2hex($this->getUncompressedCoordinates()))));
+            $der = new Sequence(new Integer(1), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(0, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(0, new BitString(bin2hex($this->getUncompressedCoordinates()))));
             return $this->pem('EC PRIVATE KEY', $der->getBinary());
         }
         $der = new Sequence(new Sequence(new ObjectIdentifier('1.2.840.10045.2.1'), new ObjectIdentifier($this->getCurveOid())), new BitString(bin2hex($this->getUncompressedCoordinates())));


423) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:135    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function asPEM() : string
     {
         if ($this->isPrivate()) {
-            $der = new Sequence(new Integer(1), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(0, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(1, new BitString(bin2hex($this->getUncompressedCoordinates()))));
+            $der = new Sequence(new Integer(1), new OctetString(bin2hex($this->d())), new ExplicitlyTaggedObject(0, new ObjectIdentifier($this->getCurveOid())), new ExplicitlyTaggedObject(2, new BitString(bin2hex($this->getUncompressedCoordinates()))));
             return $this->pem('EC PRIVATE KEY', $der->getBinary());
         }
         $der = new Sequence(new Sequence(new ObjectIdentifier('1.2.840.10045.2.1'), new ObjectIdentifier($this->getCurveOid())), new BitString(bin2hex($this->getUncompressedCoordinates())));


424) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:149    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $der = new Sequence(new Sequence(new ObjectIdentifier('1.2.840.10045.2.1'), new ObjectIdentifier($this->getCurveOid())), new BitString(bin2hex($this->getUncompressedCoordinates())));
         return $this->pem('PUBLIC KEY', $der->getBinary());
     }
-    public function getUncompressedCoordinates() : string
+    protected function getUncompressedCoordinates() : string
     {
         return "\x04" . $this->x() . $this->y();
     }


425) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:151    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function getUncompressedCoordinates() : string
     {
-        return "\x04" . $this->x() . $this->y();
+        return $this->x() . "\x04" . $this->y();
     }
     private function getCurveOid() : string
     {


426) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:151    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function getUncompressedCoordinates() : string
     {
-        return "\x04" . $this->x() . $this->y();
+        return $this->x() . $this->y();
     }
     private function getCurveOid() : string
     {


427) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:151    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function getUncompressedCoordinates() : string
     {
-        return "\x04" . $this->x() . $this->y();
+        return "\x04" . $this->y();
     }
     private function getCurveOid() : string
     {


428) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:151    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function getUncompressedCoordinates() : string
     {
-        return "\x04" . $this->x() . $this->y();
+        return "\x04" . $this->y() . $this->x();
     }
     private function getCurveOid() : string
     {


429) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:151    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function getUncompressedCoordinates() : string
     {
-        return "\x04" . $this->x() . $this->y();
+        return "\x04" . $this->x();
     }
     private function getCurveOid() : string
     {


430) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:161    [M] MBString

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
     }
 }


431) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:161    [M] Concat

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return chunk_split(base64_encode($der), 64, "\n") . sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . sprintf("-----END %s-----\n", mb_strtoupper($type));
     }
 }


432) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:161    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
     }
 }


433) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:161    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . sprintf("-----END %s-----\n", mb_strtoupper($type));
     }
 }


434) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:161    [M] Concat

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . sprintf("-----END %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n");
     }
 }


435) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:161    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n");
     }
 }


436) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:162    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 63, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
     }
 }


437) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:162    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 65, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
     }
 }


438) /home/florent/PhpstormProjects/cose-lib/src/Key/Ec2Key.php:163    [M] MBString

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", strtoupper($type));
     }
 }


439) /home/florent/PhpstormProjects/cose-lib/src/Key/Key.php:47    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @param array<int|string, mixed> $data
      */
-    public static function create(array $data) : self
+    protected static function create(array $data) : self
     {
         return new self($data);
     }


440) /home/florent/PhpstormProjects/cose-lib/src/Key/Key.php:55    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @param array<int, mixed> $data
      */
-    public static function createFromData(array $data) : self
+    protected static function createFromData(array $data) : self
     {
         Assertion::keyExists($data, self::TYPE, 'Invalid key: the type is not defined');
         return match ($data[self::TYPE]) {


441) /home/florent/PhpstormProjects/cose-lib/src/Key/Key.php:57    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public static function createFromData(array $data) : self
     {
-        Assertion::keyExists($data, self::TYPE, 'Invalid key: the type is not defined');
+        
         return match ($data[self::TYPE]) {
             '1' => new OkpKey($data),
             '2' => new Ec2Key($data),


442) /home/florent/PhpstormProjects/cose-lib/src/Key/Key.php:73    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->data[self::TYPE];
     }
-    public function alg() : int
+    protected function alg() : int
     {
         return (int) $this->get(self::ALG);
     }


443) /home/florent/PhpstormProjects/cose-lib/src/Key/Key.php:75    [M] CastInt

--- Original
+++ New
@@ @@
     }
     public function alg() : int
     {
-        return (int) $this->get(self::ALG);
+        return $this->get(self::ALG);
     }
     /**
      * @return array<int|string, mixed>


444) /home/florent/PhpstormProjects/cose-lib/src/Key/Key.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return array<int|string, mixed>
      */
-    public function getData() : array
+    protected function getData() : array
     {
         return $this->data;
     }


445) /home/florent/PhpstormProjects/cose-lib/src/Key/OkpKey.php:57    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return new self($data);
     }
-    public function x() : string
+    protected function x() : string
     {
         return $this->get(self::DATA_X);
     }


446) /home/florent/PhpstormProjects/cose-lib/src/Key/OkpKey.php:62    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->get(self::DATA_X);
     }
-    public function isPrivate() : bool
+    protected function isPrivate() : bool
     {
         return array_key_exists(self::DATA_D, $this->getData());
     }


447) /home/florent/PhpstormProjects/cose-lib/src/Key/OkpKey.php:67    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return array_key_exists(self::DATA_D, $this->getData());
     }
-    public function d() : string
+    protected function d() : string
     {
         Assertion::true($this->isPrivate(), 'The key is not private');
         return $this->get(self::DATA_D);


448) /home/florent/PhpstormProjects/cose-lib/src/Key/OkpKey.php:69    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function d() : string
     {
-        Assertion::true($this->isPrivate(), 'The key is not private');
+        
         return $this->get(self::DATA_D);
     }
     public function curve() : int


449) /home/florent/PhpstormProjects/cose-lib/src/Key/OkpKey.php:74    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Assertion::true($this->isPrivate(), 'The key is not private');
         return $this->get(self::DATA_D);
     }
-    public function curve() : int
+    protected function curve() : int
     {
         return (int) $this->get(self::DATA_CURVE);
     }
 }


450) /home/florent/PhpstormProjects/cose-lib/src/Key/OkpKey.php:76    [M] CastInt

--- Original
+++ New
@@ @@
     }
     public function curve() : int
     {
-        return (int) $this->get(self::DATA_CURVE);
+        return $this->get(self::DATA_CURVE);
     }
 }


451) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:48    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function __construct(array $data)
     {
-        parent::__construct($data);
+        
         Assertion::eq($data[self::TYPE], self::TYPE_RSA, 'Invalid RSA key. The key type does not correspond to a RSA key');
         Assertion::keyExists($data, self::DATA_N, 'Invalid RSA key. The modulus is missing');
         Assertion::keyExists($data, self::DATA_E, 'Invalid RSA key. The exponent is missing');


452) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:49    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function __construct(array $data)
     {
         parent::__construct($data);
-        Assertion::eq($data[self::TYPE], self::TYPE_RSA, 'Invalid RSA key. The key type does not correspond to a RSA key');
+        
         Assertion::keyExists($data, self::DATA_N, 'Invalid RSA key. The modulus is missing');
         Assertion::keyExists($data, self::DATA_E, 'Invalid RSA key. The exponent is missing');
     }


453) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:54    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         parent::__construct($data);
         Assertion::eq($data[self::TYPE], self::TYPE_RSA, 'Invalid RSA key. The key type does not correspond to a RSA key');
-        Assertion::keyExists($data, self::DATA_N, 'Invalid RSA key. The modulus is missing');
+        
         Assertion::keyExists($data, self::DATA_E, 'Invalid RSA key. The exponent is missing');
     }
     /**


454) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:55    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         parent::__construct($data);
         Assertion::eq($data[self::TYPE], self::TYPE_RSA, 'Invalid RSA key. The key type does not correspond to a RSA key');
         Assertion::keyExists($data, self::DATA_N, 'Invalid RSA key. The modulus is missing');
-        Assertion::keyExists($data, self::DATA_E, 'Invalid RSA key. The exponent is missing');
+        
     }
     /**
      * @param array<int|string, mixed> $data


455) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:66    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return new self($data);
     }
-    public function n() : string
+    protected function n() : string
     {
         return $this->get(self::DATA_N);
     }


456) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:71    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->get(self::DATA_N);
     }
-    public function e() : string
+    protected function e() : string
     {
         return $this->get(self::DATA_E);
     }


457) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:76    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->get(self::DATA_E);
     }
-    public function d() : string
+    protected function d() : string
     {
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_D);


458) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:78    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function d() : string
     {
-        Assertion::true($this->isPrivate(), 'The key is not private.');
+        
         return $this->get(self::DATA_D);
     }
     public function p() : string


459) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:83    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_D);
     }
-    public function p() : string
+    protected function p() : string
     {
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_P);


460) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:85    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function p() : string
     {
-        Assertion::true($this->isPrivate(), 'The key is not private.');
+        
         return $this->get(self::DATA_P);
     }
     public function q() : string


461) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:90    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_P);
     }
-    public function q() : string
+    protected function q() : string
     {
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_Q);


462) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:92    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function q() : string
     {
-        Assertion::true($this->isPrivate(), 'The key is not private.');
+        
         return $this->get(self::DATA_Q);
     }
     public function dP() : string


463) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:97    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_Q);
     }
-    public function dP() : string
+    protected function dP() : string
     {
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_DP);


464) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:99    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function dP() : string
     {
-        Assertion::true($this->isPrivate(), 'The key is not private.');
+        
         return $this->get(self::DATA_DP);
     }
     public function dQ() : string


465) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:104    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_DP);
     }
-    public function dQ() : string
+    protected function dQ() : string
     {
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_DQ);


466) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:106    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function dQ() : string
     {
-        Assertion::true($this->isPrivate(), 'The key is not private.');
+        
         return $this->get(self::DATA_DQ);
     }
     public function QInv() : string


467) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:111    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_DQ);
     }
-    public function QInv() : string
+    protected function QInv() : string
     {
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_QI);


468) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:113    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function QInv() : string
     {
-        Assertion::true($this->isPrivate(), 'The key is not private.');
+        
         return $this->get(self::DATA_QI);
     }
     /**


469) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:121    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return array<mixed>
      */
-    public function other() : array
+    protected function other() : array
     {
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_OTHER);


470) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:123    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function other() : array
     {
-        Assertion::true($this->isPrivate(), 'The key is not private.');
+        
         return $this->get(self::DATA_OTHER);
     }
     public function rI() : string


471) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:128    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_OTHER);
     }
-    public function rI() : string
+    protected function rI() : string
     {
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_RI);


472) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:130    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function rI() : string
     {
-        Assertion::true($this->isPrivate(), 'The key is not private.');
+        
         return $this->get(self::DATA_RI);
     }
     public function dI() : string


473) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:135    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_RI);
     }
-    public function dI() : string
+    protected function dI() : string
     {
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_DI);


474) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:137    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function dI() : string
     {
-        Assertion::true($this->isPrivate(), 'The key is not private.');
+        
         return $this->get(self::DATA_DI);
     }
     public function tI() : string


475) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:142    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_DI);
     }
-    public function tI() : string
+    protected function tI() : string
     {
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_TI);


476) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:144    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function tI() : string
     {
-        Assertion::true($this->isPrivate(), 'The key is not private.');
+        
         return $this->get(self::DATA_TI);
     }
     public function hasPrimes() : bool


477) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:149    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Assertion::true($this->isPrivate(), 'The key is not private.');
         return $this->get(self::DATA_TI);
     }
-    public function hasPrimes() : bool
+    protected function hasPrimes() : bool
     {
         return $this->has(self::DATA_P) && $this->has(self::DATA_Q);
     }


478) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:151    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function hasPrimes() : bool
     {
-        return $this->has(self::DATA_P) && $this->has(self::DATA_Q);
+        return $this->has(self::DATA_P) || $this->has(self::DATA_Q);
     }
     /**
      * @return string[]


479) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:157    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return string[]
      */
-    public function primes() : array
+    protected function primes() : array
     {
         return [$this->p(), $this->q()];
     }


480) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:159    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function primes() : array
     {
-        return [$this->p(), $this->q()];
+        return [$this->q()];
     }
     public function hasExponents() : bool
     {


481) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:162    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return [$this->p(), $this->q()];
     }
-    public function hasExponents() : bool
+    protected function hasExponents() : bool
     {
         return $this->has(self::DATA_DP) && $this->has(self::DATA_DQ);
     }


482) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:164    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function hasExponents() : bool
     {
-        return $this->has(self::DATA_DP) && $this->has(self::DATA_DQ);
+        return $this->has(self::DATA_DP) || $this->has(self::DATA_DQ);
     }
     /**
      * @return string[]


483) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:170    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return string[]
      */
-    public function exponents() : array
+    protected function exponents() : array
     {
         return [$this->dP(), $this->dQ()];
     }


484) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:172    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function exponents() : array
     {
-        return [$this->dP(), $this->dQ()];
+        return [$this->dQ()];
     }
     public function hasCoefficient() : bool
     {


485) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:175    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return [$this->dP(), $this->dQ()];
     }
-    public function hasCoefficient() : bool
+    protected function hasCoefficient() : bool
     {
         return $this->has(self::DATA_QI);
     }


486) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:180    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->has(self::DATA_QI);
     }
-    public function isPublic() : bool
+    protected function isPublic() : bool
     {
         return !$this->isPrivate();
     }


487) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:182    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function isPublic() : bool
     {
-        return !$this->isPrivate();
+        return $this->isPrivate();
     }
     public function isPrivate() : bool
     {


488) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:185    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return !$this->isPrivate();
     }
-    public function isPrivate() : bool
+    protected function isPrivate() : bool
     {
         return array_key_exists(self::DATA_D, $this->getData());
     }


489) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:190    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return array_key_exists(self::DATA_D, $this->getData());
     }
-    public function asPem() : string
+    protected function asPem() : string
     {
         Assertion::false($this->isPrivate(), 'Unsupported for private keys.');
         $bitSring = new Sequence(new Integer($this->fromBase64ToInteger($this->n())), new Integer($this->fromBase64ToInteger($this->e())));


490) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:192    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function asPem() : string
     {
-        Assertion::false($this->isPrivate(), 'Unsupported for private keys.');
+        
         $bitSring = new Sequence(new Integer($this->fromBase64ToInteger($this->n())), new Integer($this->fromBase64ToInteger($this->e())));
         $der = new Sequence(new Sequence(new ObjectIdentifier('1.2.840.113549.1.1.1'), new NullObject()), new BitString(bin2hex($bitSring->getBinary())));
         return $this->pem('PUBLIC KEY', $der->getBinary());


491) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:211    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $data = unpack('H*', $value);
         $hex = current($data);
-        return BigInteger::fromBase($hex, 16)->toBase(10);
+        return BigInteger::fromBase($hex, 15)->toBase(10);
     }
     private function pem(string $type, string $der) : string
     {


492) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:211    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         $data = unpack('H*', $value);
         $hex = current($data);
-        return BigInteger::fromBase($hex, 16)->toBase(10);
+        return BigInteger::fromBase($hex, 17)->toBase(10);
     }
     private function pem(string $type, string $der) : string
     {


493) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:211    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $data = unpack('H*', $value);
         $hex = current($data);
-        return BigInteger::fromBase($hex, 16)->toBase(10);
+        return BigInteger::fromBase($hex, 16)->toBase(9);
     }
     private function pem(string $type, string $der) : string
     {


494) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:211    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         $data = unpack('H*', $value);
         $hex = current($data);
-        return BigInteger::fromBase($hex, 16)->toBase(10);
+        return BigInteger::fromBase($hex, 16)->toBase(11);
     }
     private function pem(string $type, string $der) : string
     {


495) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:216    [M] MBString

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
     }
 }


496) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:216    [M] Concat

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return chunk_split(base64_encode($der), 64, "\n") . sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . sprintf("-----END %s-----\n", mb_strtoupper($type));
     }
 }


497) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:216    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
     }
 }


498) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:216    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . sprintf("-----END %s-----\n", mb_strtoupper($type));
     }
 }


499) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:216    [M] Concat

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . sprintf("-----END %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n");
     }
 }


500) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:216    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n");
     }
 }


501) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:217    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 63, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
     }
 }


502) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:217    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 65, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
     }
 }


503) /home/florent/PhpstormProjects/cose-lib/src/Key/RsaKey.php:218    [M] MBString

--- Original
+++ New
@@ @@
     }
     private function pem(string $type, string $der) : string
     {
-        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", mb_strtoupper($type));
+        return sprintf("-----BEGIN %s-----\n", mb_strtoupper($type)) . chunk_split(base64_encode($der), 64, "\n") . sprintf("-----END %s-----\n", strtoupper($type));
     }
 }
